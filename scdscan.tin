;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet scdscan (th-main name av pix default-info @v)
        (deflocal key)

        (pix-wip pix)
        (scdscan-draw-image th-main)
        (sendbuf 100 (cons "p2" (+ "scanning `" name "'..." nl)) to th-main)
        (set key (key-scd av name))
        (set @v (cfg-get key))
        (if (<> @v undef)
        then    (set @v <@v 4>)
        else    (scdscan-basic th-main name av pix default-info @v)
                (cfg-set key (list (width av) (height av) (av-approximated-number-of-frames av) name @v)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet scdscan-basic (th-main name av pix default-info @v)
        (deflocal abort l l1 frm pix1 pix2 gamma1 gamma2 k val frameno t)

        (set abort false)
        (av-seek-frame av 0)

        (set l (av-approximated-number-of-frames av))
        (set l1 (- l 1))

        (set frm (array 2))
        (set <frm 0> (pix-create (width av) (height av)))
        (set <frm 1> (pix-create (width av) (height av)))

        (set k (min (/ (- (width pix) (* 2 (space))) (width av))
                    (/ (- (height pix) (* 3 (space))) 2 (height av)) ))

        (set pix1 (pix-create (* k (width av)) (* k (height av))))
        (set pix2 (pix-create (* k (width av)) (* k (height av))))

        (set gamma1 (cfg-get-or-default-num "filter-gamma1" default-info))
        (set gamma2 (cfg-get-or-default-num "filter-gamma2" default-info))

        (set @v (array default 0 l1))

        (set k 0)
        (set t (now))
        (av-read-frame av <frm k>)
        (opt*   (not abort)
                (set k (- 1 k))
                (av-read-frame av <frm k>)
                (set frameno (av-frameno av))
                (if (< frameno l1)
                then    (set val (pix-scd-histogram <frm k> <frm (- 1 k)>))
                        (set <@v frameno> val)
                        (if (>= val 0.3)
                        then    (pix-copy-frames pix <frm (- 1 k)> <frm k> pix1 pix2 gamma1 gamma2)
                                (alt    (scdscan-draw-image th-main)
                                        (set abort true) )))
                (if (= (% frameno 100) 0)
                then    (sendbuf 100 (cons "c1" (+ "frame " frameno "/" l " (" (rint (/ frameno (- (now) t)))
                                                   " fps) (" (rint (/ frameno l 0.01)) "%)" ))
                                 to th-main ))
                (alt    (seq    (receivenb abort from th-main)
                                (set abort true) )
                        (if (not (av-is-frame-recoverable av))
                        then    (sendbuf 100 (cons "p2" "irregular timestamps not supported (read the docs)...\n") to th-main)
                                (set abort true) )))
        (close pix1 pix2 <frm 0> <frm 1>)
        (not abort)
        (sendbuf 100 (cons "c1" (+ "frame " l "/" l " (" (rint (/ frameno (- (now) t))) " fps) (100%)")) to th-main) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet scdscan-draw-image (th-main)
        (deflocal msg)

        (send [ "d" . undef ] to th-main)
        (receive msg from th-main)
        (if (not msg)
        then    (receive msg from th-main)
                (fail) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

