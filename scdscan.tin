;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet scdscan (th-main name av pix default-info @v)
        (deflocal key)

        (pix-wip pix)
        (scdscan-draw-image th-main)
        (sendbuf 100 (cons "p2" (+ "scanning `" name "'..." nl)) to th-main)
        (set key (key-scd av name))
        (set @v (cfg-get key))
        (if (<> @v undef)
        then    (set @v <@v 4>)
        else    (scdscan-low th-main name av pix default-info @v)
                (cfg-set key (list (width av) (height av) (av-approximated-number-of-frames av) name @v)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet scdscan-low (th-main name av pix default-info @v)
        (deflocal th-read-frame abort l l1 frm pix1 pix2 gamma1 gamma2 idx val frameno t)

        (av-seek-frame av 0)

        (set l (av-approximated-number-of-frames av))
        (set l1 (- l 1))

        (set frm (array 3))
        (set <frm 0> (pix-create (width av) (height av)))
        (set <frm 1> (pix-create (width av) (height av)))
        (set <frm 2> (pix-create (width av) (height av)))

        (set val (min (/ (- (width pix) (* 2 (space))) (width av))
                      (/ (- (height pix) (* 3 (space))) 2 (height av)) ))

        (set pix1 (pix-create (* val (width av)) (* val (height av))))
        (set pix2 (pix-create (* val (width av)) (* val (height av))))

        (set gamma1 (cfg-get-or-default-num "filter-gamma1" default-info))
        (set gamma2 (cfg-get-or-default-num "filter-gamma2" default-info))

        (set @v (array default 0 l1))

        (set th-read-frame (thread-create (netptr scdscan-read-frame-th) av (thread-self)))
        (<> th-read-frame undef)

        (set t (now))

        (send <frm 0> to th-read-frame)
        (receive val from th-read-frame)
        (send <frm 1> to th-read-frame)
        (set idx 1)
        (set abort false)
        (repeat (receive val from th-read-frame)
                until (not val)
                (set frameno (av-frameno av))
                until (>= frameno l1)
                (if (not (av-is-frame-recoverable av))
                then    (sendbuf 100 [ "p2" . "irregular timestamps not supported (read the docs)...\n" ] to th-main)
                        (set abort true) )
                (opt    (receivenb abort from th-main)
                        (set abort true) )
                until abort
                (send <frm (scdscan-succ idx)> to th-read-frame)
                (set val (pix-scd-histogram <frm (scdscan-prec idx)> <frm idx>))
                (set <@v frameno> val)
                (if (>= val 0.3)
                then    (pix-copy-frames pix <frm (scdscan-prec idx)> <frm idx> pix1 pix2 gamma1 gamma2)
                        (alt    (scdscan-draw-image th-main)
                                (set abort true) ))
                (if (= (% frameno 100) 0)
                then    (sendbuf 100 (cons "c1" (+ "frame " frameno "/" l " (" (rint (/ frameno (- (now) t)))
                                                   " fps) (" (rint (/ frameno l 0.01)) "%)" ))
                                 to th-main ))
                (set idx (scdscan-succ idx)) )

        (close pix1 pix2 <frm 0> <frm 1> <frm 2>)
        (send undef to th-read-frame)
        (thread-join th-read-frame)
        (not abort)
        (sendbuf 100 (cons "c1" (+ "frame " l "/" l " (" (rint (/ frameno (- (now) t))) " fps) (100%)")) to th-main) )

(defun scdscan-succ (idx) (% (+ idx 1) 3))

(defun scdscan-prec (idx) (% (- idx 1) 3))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet scdscan-read-frame-th (av client)
        (deflocal pix res)

        (repeat (receive pix from client)
                until (= pix undef)
                (alt    (seq    (av-read-frame av pix)
                                (set res true) )
                        (set res false) )
                (send res to client) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet scdscan-draw-image (th-main)
        (deflocal msg)

        (send [ "d" . undef ] to th-main)
        (receive msg from th-main)
        (if (not msg)
        then    (receive msg from th-main)
                (fail) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

