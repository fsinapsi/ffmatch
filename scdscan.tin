;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet scdscan (th-main name av pix default-info @v)
        (deflocal key)

        (pix-wip pix)
        (opt (gui-draw-image-th th-main))
        (sendbuf 100 (cons "p2" "scanning ") to th-main)
        (sendbuf 100 (cons "p2c" (cons (blue) name)) to th-main)
        (sendbuf 100 (cons "p2" "...\n") to th-main)
        (set key (key-scd av name))
        (set @v (cfg-get key))
        (if (<> @v undef)
        then    (set @v <@v 4>)
        else    (scdscan-low th-main name av pix default-info @v)
                (cfg-set key (list (width av) (height av) (av-approximated-number-of-frames av) name @v)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet scdscan-low (th-main name av pix default-info @v)
        (deflocal th-read-frame scd-display-enabled abort l l1 frm req hst pix1 pix2 gamma1 gamma2 idx val frameno last-frameno-displayed t)

        (av-rewind av)

        (set l (av-approximated-number-of-frames av))
        (set l1 (- l 1))

        (set frm (array 3))
        (set <frm 0> (pix-create (width av) (height av)))
        (set <frm 1> (pix-create (width av) (height av)))
        (set <frm 2> (pix-create (width av) (height av)))

        (set req (array 3))
        (set <req 0> (list av <frm 0>))
        (set <req 1> (list av <frm 1>))
        (set <req 2> (list av <frm 2>))

        (set hst (array 3))
        (set <hst 0> (raw 256))
        (set <hst 1> (raw 256))
        (set <hst 2> (raw 256))

        (set val (min (/ (- (width pix) (* 2 (space))) (width av))
                      (/ (- (height pix) (* 3 (space))) 2 (height av)) ))

        (set pix1 (pix-create (* val (width av)) (* val (height av))))
        (set pix2 (pix-create (* val (width av)) (* val (height av))))

        (set gamma1 (cfg-get-or-default-num "filter-gamma1" default-info))
        (set gamma2 (cfg-get-or-default-num "filter-gamma2" default-info))

        (set @v (array default 0 l1))

        ; FIXME
        ; non si può usare <_kv "th-read-frame1"> perché questo
        ; è un thread diverso dal principale
        ;(set th-read-frame <_kv "th-read-frame1">)
        (set th-read-frame (thread-create (netptr th-read-frame) (thread-self)))

        (set t (now))

        (send <req 0> to th-read-frame)
        (receive val from th-read-frame)
        (send <req 1> to th-read-frame)
        (pix-scd-histogram-set <frm 0> <hst 0>)
        (set idx 1)
        (set scd-display-enabled (cfg-get-or-default "scd-display-enabled" default-info))
        (set last-frameno-displayed -100)
        (set abort false)
        (repeat (receive val from th-read-frame)
                until (not val)
                (set frameno (av-frameno av))
                until (>= frameno l1)
                (if (not (av-is-frame-recoverable av))
                then    (sendbuf 100 (cons "p2" (+ $"frame # " frameno $" is not recoverable by a seek" nl
                                                   $"expected timestamp" ": " (approx4 (av-frameno2ts av frameno)) " s" nl
                                                   $"detected timestamp" ": " (approx4 (* (av-ts av) (av-time-base av (av-video-stream-idx av)))) " s"
                                                   nl )) to th-main )
                        (sendbuf 100 (cons "p2c" (cons (red) (+ $"too irregular timestamps not supported\n(more info in the guide)" nl ))) to th-main)
                        (set abort true) )
                (opt    (receivenb abort from th-main)
                        (set abort true) )
                until abort
                (send <req (scdscan-succ idx)> to th-read-frame)
                (pix-scd-histogram-set <frm idx> <hst idx>)
                (set val (pix-scd-histogram-dist <hst (scdscan-prec idx)> <hst idx>))
                (set <@v frameno> val)
                (if scd-display-enabled
                then    (if (>= val 0.3)
                        then    (if (>= (- frameno last-frameno-displayed) 30)
                                then    (set last-frameno-displayed frameno)
                                        (pix-copy-frames pix <frm (scdscan-prec idx)> <frm idx> pix1 pix2 gamma1 gamma2)
                                        (alt    (gui-draw-image-th th-main)
                                                (set abort true) ))))
                (if (= (% frameno 100) 0)
                then    (sendbuf 100 (cons "c1" (+ "frame " frameno "/" l " (" (rint (/ frameno (- (now) t)))
                                                   " fps) (" (rint (/ frameno l 0.01)) "%)" ))
                                 to th-main ))
                (set idx (scdscan-succ idx)) )

        (close pix1 pix2 <frm 0> <frm 1> <frm 2> <hst 0> <hst 1> <hst 2>)
        (send undef to th-read-frame)
        (thread-join th-read-frame)
        (not abort)
        (sendbuf 100 (cons "c1" (+ "frame " l "/" l " (" (rint (/ frameno (- (now) t))) " fps) (100%)")) to th-main) )

(defun scdscan-succ (idx) (% (+ idx 1) 3))

(defun scdscan-prec (idx) (% (- idx 1) 3))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

