;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet th-clock (th)
        (deflocal delay)

        (repeat (receive delay from th)
                until (= delay undef)
                (sleep delay)
                (send true to th) ))

(defnet th-clock-send (delay)
        (deflocal thclk done res)

        (set thclk <_kv "th-clock">)
        (set done false)
        (repeat (alt    (seq    (sendnb delay to thclk)
                                (set done true) )
                        (seq    (receivenb res from thclk)
                                (send delay to thclk)
                                (set done true) )
                        (success) )
                until done
                (sleep 0.01) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet th-read-frame (th)
        (deflocal req)

        (repeat (receive req from th)
                until (= req undef)
                (alt    (seq    (if (= (length req) 2)
                                then    (av-read-frame <req 0> <req 1>)
                                else    (av-read-frame <req 0> <req 1> <req 2>) )
                                (set req true) )
                        (set req false) )
                (send req to th) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet th-sift-features (sift-impl th frm vlfeat-first-octave-idx nlevels-per-octave peak-thresh edge-thresh)
        (case sift-impl of
                0   (th-sift-features-opencv th frm)
                1   (th-sift-features-vlfeat th frm vlfeat-first-octave-idx nlevels-per-octave peak-thresh edge-thresh) ))

(defnet th-sift-features-opencv (th frm)
        (repeat (receive frm from th)
                until (not (pixp frm))
                (send (cv-sift-features frm) to th) ))

(defnet th-sift-features-vlfeat (th frm vlfeat-first-octave-idx nlevels-per-octave peak-thresh edge-thresh)
        (deflocal filt)

        (set filt (vl-sift-new (width frm) (height frm) -1 nlevels-per-octave vlfeat-first-octave-idx))
        (vl-sift-set-peak-thresh filt peak-thresh)
        (vl-sift-set-edge-thresh filt edge-thresh)
        (repeat (receive frm from th)
                until (not (pixp frm))
                (vl-sift-match-descr filt frm)
                (send filt to th) )
        (close filt) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet th-sound (th)
        (deflocal snd t prev-t)

        (set prev-t (- (now) (* 60 60 24)))
        (repeat (receive snd from th)
                until (= snd undef)
                (set t (now))
                (opt    (truep <_kv "sound-enabled">)
                        ;(if (> (- t prev-t) 30)
                        ;then    (sdl-playwav-memory (raw-load-static "silence.wav") 1.0) )
                        (sdl-playwav-memory snd 1.0) )
                (set prev-t t) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

