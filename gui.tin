;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui ()
        (deflocal dlg x y w h w-corr h-corr)

        ;(cfg-set "cuvid-enabled" false)

        (set x (cfg-get "win-main-position"))
        (if (= x undef)
        then    (set x (cmacro IUP_CENTER))
                (set y (cmacro IUP_CENTER))
        else    (set y (max 0 (cdr x)))
                (set x (max 0 (car x))) )
        (set w (cfg-get-num "win-main-width"))
        (set h (cfg-get-num "win-main-height"))
        (if (not (integerp w))
        then    (set w (fc-width)) )
        (if (not (integerp h))
        then    (set h (fc-height)) )

        ;(print w "x" h "+" x "+" y nl)

        (set dlg (iup-dialog (gui-setup-main)))

        (set <_kv "dlg"> dlg)
        (iup-set-attribute-handle undef "PARENTDIALOG" dlg)
        (iup-set-str-attribute dlg "TITLE" (+ "FFmatch (" (date->version (compile-time)) ")"))
        (iup-set-attribute-handle dlg "MENU" (gui-setup-menu))
        (iup-set-callback dlg "CLOSE_CB" (netptr gui-close-cb))
        ;(iup-set-callback dlg "DROPFILES_CB" (netptr gui-dropfiles-cb))
        (iup-set-callback dlg "K_ANY" (netptr gui-kb-cb))
        (iup-set-callback dlg "RESIZE_CB" (netptr gui-resize-cb))
        (iup-set-bool dlg "FULLSCREEN" false)

        (gui-update)

        (iup-set-str-attribute dlg "RASTERSIZE" (sprint w "x" h))
        (iup-show-xy dlg x y)
        (set w-corr (- w (iup-get-int dlg "RASTERSIZE")))
        (set h-corr (- h (iup-get-int2 dlg "RASTERSIZE")))
        (iup-set-str-attribute dlg "USERSIZE")

        (gui-update-image)

        (iup-set-callback <_kv "text1"> "BUTTON_CB" (netptr gui-text1-button-cb))

        (iup-main-loop)

        (set x (iup-get-int dlg "SCREENPOSITION"))
        (set y (iup-get-int2 dlg "SCREENPOSITION"))
        (set w (+ (iup-get-int dlg "RASTERSIZE") w-corr))
        (set h (+ (iup-get-int2 dlg "RASTERSIZE") h-corr))

        ;(print w "x" h "+" x "+" y nl)

        (sqlite3-begin _db)
        (alt    (seq    (cfg-set "win-main-width" w)
                        (cfg-set "win-main-height" h)
                        (cfg-set "win-main-position" (cons x y))
                        (sqlite3-end _db) )
                (sqlite3-rollback _db) )

        (close dlg) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-close-cb (self)
        (if (= <_kv "th"> undef)
        then    (iup-exit-loop) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-kb-cb (dlg c)
        (if (<> <_kv "th"> undef)
        then    (if (= c (cmacro K_ESC))
                then    (gui-abort-low dlg) )
                (fail) )
        (case c of
                (cmacro K_cQ)           (iup-exit-loop)
                (cmacro K_ESC)          (gui-update-image)
                (cmacro K_cP)           (cfg-cb dlg)
                (cmacro K_cPlus)        (gui-zoom-in-cb dlg)
                (cmacro K_cMinus)       (gui-zoom-out-cb dlg)
                (cmacro K_c0)           (gui-zoom-zero-cb dlg)
                (cmacro K_P)            (gui-restore-default-cb dlg)
                (cmacro K_F1)           (gui-open1-cb dlg)
                (cmacro K_F2)           (gui-open2-cb dlg)
                (cmacro K_sF1)          (gui-open-path1-cb dlg)
                (cmacro K_sF2)          (gui-open-path2-cb dlg)
                (cmacro K_cO)           (gui-open-project-cb dlg)
                (cmacro K_cS)           (gui-save-project-cb dlg)
                (cmacro K_F5)           (gui-start-cb dlg)
                (cmacro K_c1)           (gui-text1-move1 dlg)
                (cmacro K_c2)           (gui-text1-move2 dlg)
                default                 (fail) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun gui-setup-main () net gui-setup-main)
(defnet gui-setup-main (@wid)
        (set @wid (iup-vbox (gui-setup-toolbar) (gui-setup-body)))
        (iup-set-str-attribute @wid "MARGIN" "2x2") )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun gui-setup-menu () net  gui-setup-menu)
(defnet gui-setup-menu (@menu)
        (set <_kv "menu"> (assoc))
        (set @menu (iup-menu
                (gui-setup-submenu "&File" (iup-menu
                        (gui-setup-menu-item (+ $"Select movie 1" (if (cmingw) "\t" "\t\t") "F1") (netptr gui-open1-cb))
                        (gui-setup-menu-item (+ $"Select movie 2" (if (cmingw) "\t" "\t\t") "F2") (netptr gui-open2-cb))
                        (gui-setup-menu-item (+ $"Select path 1" (if (cmingw) "\t" "\t\t\t") "Shift F1") (netptr gui-open-path1-cb))
                        (gui-setup-menu-item (+ $"Select path 2" (if (cmingw) "\t" "\t\t\t") "Shift F2") (netptr gui-open-path2-cb))
                        (iup-separator)
                        (gui-setup-menu-item (+ $"Open project" (if (cmingw) "\t" "\t\t\t\t") "Ctrl O") (netptr gui-open-project-cb))
                        (gui-setup-menu-item-low (+ $"Save project" (if (cmingw) "\t" "\t\t\t") "Ctrl S") (netptr gui-save-project-cb)
                            "save-project" )
                        (iup-separator)
                        (gui-setup-menu-item-low $"Swap order" (netptr gui-swap-order-cb) "swap-order")
                        (iup-separator)
                        (gui-setup-menu-item-low $"Save top text as..." (netptr gui-save-text1-cb) "save-text1")
                        (gui-setup-menu-item-low $"Save bottom text as..." (netptr gui-save-text2-cb) "save-text2")
                        (gui-setup-menu-item-low $"Save frame 1 as..." (netptr gui-save-frame1-cb) "save-frame1")
                        (gui-setup-menu-item-low $"Save frame 2 as..." (netptr gui-save-frame2-cb) "save-frame2")
                        (iup-separator)
                        (gui-setup-menu-item $"Import data from cfg" (netptr gui-import-from-cfg-cb))
                        (iup-separator)
                        (gui-setup-menu-item (+ "Zoom in" (if (cmingw) "\t" "\t\t\t\t\t") "Ctrl +") (netptr gui-zoom-in-cb))
                        (gui-setup-menu-item (+ "Zoom out" (if (cmingw) "\t" "\t\t\t\t") "Ctrl -") (netptr gui-zoom-out-cb))
                        (gui-setup-menu-item (+ "No zoom" (if (cmingw) "\t" "\t\t\t\t\t") "Ctrl 0") (netptr gui-zoom-zero-cb))
                        (iup-separator)
                        (gui-setup-menu-item (+ "&" $"Preferences" (if (cmingw) "\t" "\t\t\t\t") "Ctrl P") (netptr cfg-cb))
                        (iup-separator)
                        (gui-setup-menu-item (+ "&" $"Exit" (if (cmingw) "\t" "\t\t\t\t\t\t") "Ctrl Q") (netptr iup-cancel-cb)) ))
                (gui-setup-submenu (+ "&" $"Clear") (iup-menu
                        (gui-setup-menu-item-low $"Clear \"scd\" data 1" (netptr gui-clear-scd1-cb) "clear-scd1")
                        (gui-setup-menu-item-low $"Clear \"scd\" data 2" (netptr gui-clear-scd2-cb) "clear-scd2")
                        (gui-setup-menu-item-low $"Clear \"sift check\" data" (netptr gui-clear-sck-cb) "clear-sck")
                        (gui-setup-menu-item-low $"Clear failed checks" (netptr gui-clear-failed-sck-cb) "clear-failed-sck")
                        (gui-setup-menu-item-low $"Clear \"mapping\" data" (netptr gui-clear-map-cb) "clear-map")
                        (iup-separator)
                        (gui-setup-menu-item $"Clear obsolete paths" (netptr gui-clear-paths-cb))
                        (gui-setup-menu-item $"Clear obsolete projects" (netptr gui-clear-projects-cb))
                        (gui-setup-menu-item $"Clear obsolete data" (netptr gui-clear-data-and-vacuum-cb))
                        (iup-separator)
                        (gui-setup-menu-item-low $"Clear top text" (netptr gui-clear-text1-cb) "clear-text1")
                        (gui-setup-menu-item-low $"Clear bottom text" (netptr gui-clear-text2-cb) "clear-text2") ))
                (gui-setup-submenu "&Misc" (iup-menu
                        (gui-setup-menu-item-low $"Print selected movie names" (netptr gui-print-selected-cb) "print-selected")
                        (gui-setup-menu-item $"Print the valid paths" (netptr gui-print-valid-paths-cb))
                        (gui-setup-menu-item $"Print obsolete paths" (netptr gui-print-obsolete-paths-cb))
                        (gui-setup-menu-item $"Print obsolete projects" (netptr gui-print-obsolete-projects-cb))
                        (gui-setup-menu-item-low $"Print timestamps movie 1" (netptr gui-print-timestamps1-cb) "print-timestamps1")
                        (gui-setup-menu-item-low $"Print timestamps movie 2" (netptr gui-print-timestamps2-cb) "print-timestamps2")
                        (iup-separator)
                        (gui-setup-menu-item-low $"Draw keypoints" (netptr gui-draw-keypoints-cb) "draw-keypoints")
                        (iup-separator)
                        (gui-setup-menu-item-low $"Report failed checks" (netptr gui-report-failed-cb) "report-failed")
                        (iup-separator)
                        (gui-setup-menu-item $"Restore default parameters" (netptr gui-restore-default-cb)) ))
                (gui-setup-submenu (+ "&" $"Help") (iup-menu
                        (gui-setup-menu-item $"About FFmatch" (netptr info-cb)) ))))
        (set <_kv "menu" "widget"> @menu) )

(defun gui-setup-submenu (title menu) net gui-setup-submenu)
(defnet gui-setup-submenu (title menu @submenu)
        (set @submenu (iup-submenu title menu)) )

(defun gui-setup-menu-item (title cback)
        (gui-setup-menu-item-low title cback undef) )

(defun gui-setup-menu-item-low (title cback item-name) net gui-setup-menu-item-low)
(defnet gui-setup-menu-item-low (title cback item-name @item)
        (set @item (iup-item title))
        (iup-set-callback @item "ACTION" cback)
        (if (stringp item-name)
        then    (set <_kv "menu" item-name> @item) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun gui-setup-toolbar () net gui-setup-toolbar)
(defnet gui-setup-toolbar (@wid)
        (deflocal q btn-info btn1 btn2 btn3 btn4 btn5 btn6 btn7 btn8 hb1 hb2 hb3 hb4 hb5)

        ;(set q (pix-load-static "22x22/document-open-5.png"))
        ;(set p (pix-text 2))
        ;(pix-draw-pix-alpha q 9 10 p)
        ;(close p)
        ;(pix-save-png q "z2.png")

        (set q <_kv "da-chiudere">)
        (set btn-info (assoc))
        (set <_kv "toolbar"> btn-info)
        (set btn1 (iup-button-icon undef (netptr gui-open1-cb) (pix-load-static "22x22/document-open-5-one.png") q))
        (set btn2 (iup-button-icon undef (netptr gui-open2-cb) (pix-load-static "22x22/document-open-5-two.png") q))
        (set btn3 (iup-button-icon undef (netptr gui-open-project-cb) (pix-load-static "22x22/document-open-5.png") q))
        (set btn4 (iup-button-icon undef (netptr gui-save-project-cb) (pix-load-static "22x22/document-save-as-5.png") q))
        (set btn5 (iup-button-icon undef (netptr gui-start-cb) (pix-load-static "22x22/system-run-3.png") q))
        (set btn6 (iup-button-icon undef (netptr gui-abort-cb) (pix-load-static "22x22/process-stop-2.png") q))
        (set btn7 (iup-button-icon undef (netptr audio-cb) (pix-load-static "22x22/speaker3.png") q))
        (set btn8 (iup-button-icon undef (netptr cfg-cb) (pix-load-static "22x22/configure-2.png") q))
        (iup-set-str-attribute btn1 "TIP" $"select movie 1")
        (iup-set-str-attribute btn2 "TIP" $"select movie 2")
        (iup-set-str-attribute btn3 "TIP" $"open project")
        (iup-set-str-attribute btn4 "TIP" $"save project")
        (iup-set-str-attribute btn5 "TIP" $"start")
        (iup-set-str-attribute btn6 "TIP" $"abort")
        (iup-set-str-attribute btn7 "TIP" $"audio tracks")
        (iup-set-str-attribute btn8 "TIP" $"preferences")
        (set <btn-info "open1"> btn1)
        (set <btn-info "open2"> btn2)
        (set <btn-info "open-project"> btn3)
        (set <btn-info "save-project"> btn4)
        (set <btn-info "start"> btn5)
        (set <btn-info "abort"> btn6)
        (set <btn-info "audio"> btn7)
        (set <btn-info "prefs"> btn8)
        (set hb1 (iup-hbox btn1 btn2))
        (iup-set-int hb1 "GAP" 0)
        (set hb2 (iup-hbox btn3 btn4))
        (iup-set-int hb2 "GAP" 0)
        (set hb3 (iup-hbox btn5 btn6))
        (iup-set-int hb3 "GAP" 0)
        (set hb4 (iup-hbox btn7))
        (iup-set-int hb4 "GAP" 0)
        (set hb5 (iup-hbox btn8))
        (iup-set-int hb5 "GAP" 0)
        (set @wid (iup-hbox hb1 (iup-vertical-separator)
                            hb2 (iup-vertical-separator)
                            hb3 (iup-vertical-separator)
                            hb4 (iup-vertical-separator)
                            hb5 ))
        (iup-set-int @wid "GAP" 2) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun gui-setup-body () net gui-setup-body)
(defnet gui-setup-body (@wid)
        (set @wid (iup-hbox (gui-setup-image) (gui-setup-text)))
        (iup-set-str-attribute @wid "MARGIN" "0x0") )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun gui-setup-image () net gui-setup-image)
(defnet gui-setup-image (@wid)
        (deflocal lbl img pix)

        (set lbl (iup-label))
        (iup-set-str-attribute lbl "ALIGNMENT" "ACENTER:ACENTER")
        (iup-set-str-attribute lbl "EXPAND" "YES")
        (set pix (pix-create 1 1))
        (pix-clear pix)
        (set <_kv "pix"> pix)
        (set img (iup-image-rgba pix))
        (set <_kv "img"> img)
        (iup-set-attribute-handle lbl "IMAGE" img)
        (set @wid (iup-scroll-box lbl))
        (set <_kv "sbx"> @wid) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun gui-setup-text () net gui-setup-text)
(defnet gui-setup-text (@wid)
        (set @wid (iup-vbox (gui-setup-text-low 1) (gui-setup-text-toolbar) (gui-setup-text-low 2)))
        (iup-set-str-attribute @wid "EXPAND" "VERTICAL")
        (iup-set-str-attribute @wid "MARGIN" "0x0") )

(defun gui-setup-text-low (which) net gui-setup-text-low)
(defnet gui-setup-text-low (which @wid)
        (set @wid (iup-text))
        (set <_kv (+ "text" which)> @wid)
        (iup-set-bool @wid "MULTILINE" true)
        (iup-set-bool @wid "READONLY" (cmingw))
        (iup-set-bool @wid "CANFOCUS" false)
        (iup-set-bool @wid "EXPAND" true)
        (iup-set-bool @wid "WORDWRAP" false)
        (iup-set-bool @wid "FORMATTING" true)
        (iup-set-bool @wid "APPENDNEWLINE" false)
        (iup-set-str-attribute @wid "PADDING" "2x0")
        ;(iup-set-str-attribute @wid "FONT" font)
        (iup-set-str-attribute @wid "VALUE" "")
        (iup-set-int @wid "VISIBLELINES" 1)
        (iup-set-int @wid "VISIBLECOLUMNS" 1) )

(defun gui-setup-text-toolbar () net gui-setup-text-toolbar)
(defnet gui-setup-text-toolbar (@wid)
        (set @wid (iup-vbox (gui-setup-text-toolbar1) (gui-setup-text-toolbar2)))
        (set <_kv "supervision-toolbar"> @wid)
        (iup-set-bool @wid "EXPAND" false)
        (iup-set-str-attribute @wid "MARGIN" "0x5") )

(defun gui-setup-text-toolbar1 () net gui-setup-text-toolbar1)
(defnet gui-setup-text-toolbar1 (@wid)
        (deflocal q btn1 btn2 btn3 btn4 btn5 btn6 spin1 spin2 hb)

        (set q <_kv "da-chiudere">)
        (set btn1 (iup-button-icon undef (netptr gui-left-first-cb) (pix-load-static "16x16/go-first-view.png") q))
        (set btn2 (iup-button-icon undef (netptr gui-left-double-cb) (pix-load-static "16x16/go-previous-view.png") q))
        (set btn3 (iup-button-icon undef (netptr gui-left-cb) (pix-load-static "16x16/go-previous-7.png") q))
        (set btn4 (iup-button-icon undef (netptr gui-right-cb) (pix-load-static "16x16/go-next-7.png") q))
        (set btn5 (iup-button-icon undef (netptr gui-right-double-cb) (pix-load-static "16x16/go-next-view.png") q))
        (set btn6 (iup-button-icon undef (netptr gui-right-last-cb) (pix-load-static "16x16/go-last-view.png") q))

        (set spin1 (iup-text-spin 1 1 1))
        (set spin2 (iup-text-spin 1 1 1))
        (iup-set-str-attribute spin1 "EXPAND" "HORIZONTAL")
        (iup-set-str-attribute spin2 "EXPAND" "HORIZONTAL")
        (set <_kv "spin1"> spin1)
        (set <_kv "spin2"> spin2)
        (iup-set-callback spin1 "K_ANY" (netptr gui-spin-kb-cb))
        (iup-set-callback spin2 "K_ANY" (netptr gui-spin-kb-cb))
        (iup-set-callback spin1 "SPIN_CB" (netptr gui-spin-cb))
        (iup-set-callback spin2 "SPIN_CB" (netptr gui-spin-cb))

        (set <_kv "a-combo-goto"> (array default [ 1 1 0 ] 1))

        (set hb (iup-hbox btn1 btn2 btn3 btn4 btn5 btn6))
        (iup-set-int hb "GAP" 0)

        (set @wid (iup-hbox spin1 hb spin2))
        (iup-set-str-attribute @wid "ALIGNMENT" "ACENTER")
        (iup-set-int @wid "GAP" 4)
        (iup-set-bool @wid "EXPAND" true) )

(defun gui-setup-text-toolbar2 () net gui-setup-text-toolbar2)
(defnet gui-setup-text-toolbar2 (@wid)
        (deflocal q btn1 btn2 btn3 btn4 btn5 btn6 btn7 spin1 spin2 hb1 hb2)

        (set q <_kv "da-chiudere">)
        (set btn1 (iup-button-icon undef (netptr gui-scd-left1-cb) (pix-load-static "16x16/arrow-left-3.png") q))
        (set btn2 (iup-button-icon undef (netptr gui-scd-right1-cb) (pix-load-static "16x16/arrow-right-3.png") q))
        (set btn3 (iup-button-icon undef (netptr gui-sync1-cb) (pix-load-static "16x16/palm-pilot-sync.png") q))
        (set btn4 (iup-button-icon undef (netptr gui-scd-left2-cb) (pix-load-static "16x16/arrow-left-3.png") q))
        (set btn5 (iup-button-icon undef (netptr gui-scd-right2-cb) (pix-load-static "16x16/arrow-right-3.png") q))
        (set btn6 (iup-button-icon undef (netptr gui-sync2-cb) (pix-load-static "16x16/palm-pilot-sync.png") q))
        (set btn7 (iup-button-icon undef (netptr gui-force-cb) (pix-load-static "16x16/archive-insert-2.png") q))

        (set spin1 (iup-text-spin-ratio 0 1 0.3 0.01))
        (set spin2 (iup-text-spin-ratio 0 1 0.3 0.01))
        (set <_kv "scd-spin1"> spin1)
        (set <_kv "scd-spin2"> spin2)

        (set hb1 (iup-hbox btn1 btn2 btn3))
        (iup-set-int hb1 "GAP" 0)

        (set hb2 (iup-hbox btn4 btn5 btn6))
        (iup-set-int hb2 "GAP" 0)

        (set @wid (iup-hbox spin1 hb1 (iup-label "        ") spin2 hb2 (iup-label "        ") btn7))
        (iup-set-str-attribute @wid "ALIGNMENT" "ACENTER")
        (iup-set-int @wid "GAP" 4)
        (iup-set-bool @wid "EXPAND" true) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-draw-image ()
        (deflocal sbx lbl img)

        (set sbx <_kv "sbx">)
        (set lbl <sbx 0>)
        (set img (iup-image-rgba <_kv "pix">))
        (iup-set-attribute-handle lbl "IMAGE" img)
        (close <_kv "img">)
        (set <_kv "img"> img)
        (iup-refresh lbl)
        (iup-refresh sbx)
        (iup-redraw lbl)
        (iup-flush) )

(defnet gui-update-image ()
        (gui-update-image-low false) )

(defnet gui-update-image-low (draw-keypoints)
        (deflocal default-info pix av1 av2 pix1 pix2 a)

        (set default-info <_kv "default">)
        (set pix <_kv "pix">)
        (set av1 <_kv "av1">)
        (set av2 <_kv "av2">)
        (if (or (= av1 undef) (= av2 undef))
        then    (pix-logo pix)
        else    (pix-create-pixfrm pix av1 av2 pix1 pix2)
                (alt    (seq    (av-read-frame av1 pix1 (iup-get-int <_kv "spin1"> "SPINVALUE"))
                                (pix-gamma pix1 (cfg-get-or-default-num "filter-gamma1" default-info))
                                (if (cfg-get-or-default "filter-mirror1" default-info)
                                then    (pix-hflip pix1) )
                                (if (cfg-get-or-default "filter-flip1" default-info)
                                then    (pix-vflip pix1) )
                                (set a (cfg-get-or-default-num "filter-rotate1" default-info))
                                (if (<> a 0)
                                then    (set a (pix-rotate pix1 a))
                                        (close pix1)
                                        (set pix1 a) )
                                (if draw-keypoints
                                then    (skip (cv-sift-features-draw pix1)) ))
                        (pix-error pix1) )
                (alt    (seq    (av-read-frame av2 pix2 (iup-get-int <_kv "spin2"> "SPINVALUE"))
                                (pix-gamma pix2 (cfg-get-or-default-num "filter-gamma2" default-info))
                                (if (cfg-get-or-default "filter-mirror2" default-info)
                                then    (pix-hflip pix2) )
                                (if (cfg-get-or-default "filter-flip2" default-info)
                                then    (pix-vflip pix2) )
                                (set a (cfg-get-or-default-num "filter-rotate2" default-info))
                                (if (<> a 0)
                                then    (set a (pix-rotate pix2 a))
                                        (close pix2)
                                        (set pix2 a) )
                                (if draw-keypoints
                                then    (skip (cv-sift-features-draw pix2)) ))
                        (pix-error pix2) )
                (pix-clear pix)
                (set a (/ (- (height pix) (height pix1) (height pix2) (space)) 2))
                (pix-draw-pix pix (/ (- (width pix) (width pix1)) 2) a pix1)
                (pix-draw-pix pix (/ (- (width pix) (width pix2)) 2) (+ a (height pix1) (space)) pix2)
                (close pix1 pix2) )
        (gui-draw-image) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-disable-menu ()
        ;(iup-set-bool <_kv "dlg"> "SIMULATEMODAL" true)
        (iup-set-active <_kv "menu" "widget"> false) )

(defnet gui-enable-menu ()
        ;(iup-set-bool <_kv "dlg"> "SIMULATEMODAL" false)
        (iup-set-active <_kv "menu" "widget"> true) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-update ()
        (deflocal menu-info btn-info av1 av2 name1 name2 running
                  supervision map-exists i)

        (set menu-info <_kv "menu">)
        (set btn-info <_kv "toolbar">)
        (set av1 <_kv "av1">)
        (set av2 <_kv "av2">)
        (set running (<> <_kv "th"> undef))
        (set supervision (and (not running) (<> av1 undef) (<> av2 undef)))
        (set <_kv "supervision"> supervision)
        (set map-exists false)
        (if (not running)
        then    (set name1 (fullpath->name <_kv "path1">))
                (set name2 (fullpath->name <_kv "path2">))
                (set map-exists (cfg-exists (key-map av1 av2 name1 name2)))
                (iup-set-active <menu-info "save-project"> (and (<> av1 undef) (<> av2 undef)))
                (iup-set-active <menu-info "swap-order"> supervision)
                (iup-set-active <menu-info "clear-scd1">
                        (if (= av1 undef) false (cfg-exists (key-scd av1 name1))) )
                (iup-set-active <menu-info "clear-scd2">
                        (if (= av2 undef) false (cfg-exists (key-scd av2 name2))) )
                (set i (if (or (= av1 undef) (= av2 undef))
                                false
                                (cfg-exists (key-sck av1 av2 name1 name2)) ))
                (iup-set-active <menu-info "clear-sck"> i)
                (iup-set-active <menu-info "clear-failed-sck"> i)
                (iup-set-active <menu-info "report-failed"> i)
                (iup-set-active <menu-info "clear-map">
                        (if (or (= av1 undef) (= av2 undef)) false map-exists) )
                (set i (> (iup-get-int <_kv "text1"> "COUNT") 0))
                (iup-set-active <menu-info "save-text1"> i)
                (iup-set-active <menu-info "clear-text1"> i)
                (set i (> (iup-get-int <_kv "text2"> "COUNT") 0))
                (iup-set-active <menu-info "save-text2"> i)
                (iup-set-active <menu-info "clear-text2"> i)
                (iup-set-active <menu-info "save-frame1"> supervision)
                (iup-set-active <menu-info "save-frame2"> supervision)
                (iup-set-active <menu-info "print-selected">
                        (or (<> av1 undef) (<> av2 undef)) )
                (iup-set-active <menu-info "print-timestamps1"> (<> av1 undef))
                (iup-set-active <menu-info "print-timestamps2"> (<> av2 undef))
                (iup-set-active <menu-info "draw-keypoints"> (and (<> av1 undef) (<> av2 undef))) )
        (iup-set-active <menu-info "widget"> (not running))
        (iup-set-active <_kv "supervision-toolbar"> (and (not running) supervision))
        (iup-set-active <btn-info "open1"> (not running))
        (iup-set-active <btn-info "open2"> (not running))
        (iup-set-active <btn-info "open-project"> (not running))
        (iup-set-active <btn-info "save-project"> (and (not running)  (<> av1 undef) (<> av2 undef)))
        (iup-set-active <btn-info "start"> supervision)
        (iup-set-active <btn-info "abort">
                (and running (not <_kv "abort">)) )
        (iup-set-active <btn-info "audio"> map-exists)
        (iup-set-active <btn-info "prefs"> (not running)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-resize-cb (dlg w h)
        (opt    (= <_kv "th"> undef)
                (iup-post-call (netptr gui-resize-post))) )

(defnet gui-resize-post ()
        (deflocal sbx lbl w h mag pix)

        (set sbx <_kv "sbx">)
        (set lbl <sbx 0>)
        (set w (iup-get-int sbx "RASTERSIZE"))
        (set h (iup-get-int2 sbx "RASTERSIZE"))
        ;(print w " x " h nl)
        (set mag (pow (zoom-step) <_kv "zoom-level">))
        (set pix (pix-create (* w mag) (* h mag)))
        (pixp pix)
        (close <_kv "pix">)
        (set <_kv "pix"> pix)
        (gui-update-image) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-move-text1-on-current-value (which)
        (opt (gui-move-text1-on-current-value-low which)) )

(defnet gui-move-text1-on-current-value-low (which)
        (deflocal text1 s t u v l x1 y1 x2 y2 i found)

        (set text1 <_kv "text1">)
        (set s (iup-get-str-attribute text1 "VALUE"))
        (set t s)
        (set v (iup-get-int <_kv (+ "spin" which)> "VALUE"))
        (set y2 0)
        (set found false)
        (repeat (str-readline s l)
                until (= l undef)
                (opt    (= <l 0> '[')
                        (= <l 7> '-')
                        (= <l 14> ']')
                        (set x1 (str->num (sub 1 6 l)))
                        (integerp x1)
                        (set y1 (str->num (sub 8 6 l)))
                        (integerp y1)
                        (set u (sub 15 (maxint) l))
                        (alt    (seq    (lmatch u "¹")
                                        (set x2 -1)
                                        (set y2 -1) )
                                (seq    (lmatch u "²")
                                        (set x2 x1)
                                        (set y2 y1)
                                        (set x1 -1)
                                        (set y1 -1) )
                                (seq    (= <l 21> '[')
                                        (= <l 28> '-')
                                        (= <l 35> ']')
                                        (set x2 (str->num (sub 22 6 l)))
                                        (integerp x2)
                                        (set y2 (str->num (sub 29 6 l)))
                                        (integerp y2) )
                                (seq    (lmatch remove u " -/-> ??? {")
                                        (search-and-cut "-" u i)
                                        (search-and-cut "}" u i)
                                        (set i (str->num i))
                                        (integerp i)
                                        (set x2 (+ y2 1))
                                        (inc y2 i) ))
                        (set found (or (and (= which 1) (in v x1 .. y1))
                                       (and (= which 2) (in v x2 .. y2)) )))
                until found )
        (if found
        then    (search l t v)
                (set i (utf8-length (sub 0 v t)))
                (iup-set-int text1 "CARETPOS" i)
                (iup-set-str-attribute text1 "SELECTIONPOS" (sprint i ":" (+ i (utf8-length l)))) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-report ()
        (gui-report-low true) )

(defnet gui-report-low (go-home)
        (deflocal text1 ab av1 av2 name1 name2 k sck map p q n i)

        (set text1 <_kv "text1">)
        (set ab <_kv "a-combo-goto">)
        (while (> (length ab) 0) do
                (array-remove ab 0) )
        (alt    (seq    (set av1 <_kv "av1">)
                        (<> av1 undef)
                        (set av2 <_kv "av2">)
                        (<> av2 undef)
                        (set name1 (fullpath->name <_kv "path1">))
                        (set name2 (fullpath->name <_kv "path2">))
                        (set k (cfg-get (key-map av1 av2 name1 name2)))
                        (<> k undef)
                        (set sck (cfg-get (key-sck av1 av2 name1 name2)))
                        (<> sck undef)
                        (set map (map-create <k 0> <k 1>))
                        (for i in <k 2> do
                                (set p <i 0>)
                                (set q <i 1>)
                                (set n <i 2>)
                                (map-bind-low (car map) p q n)
                                (map-bind-low (cdr map) q p n) )
                        (map-report-low (cons text1 ab)
                                map name1 name2
                                (/ <sck 3> <sck 2>)
                                (/ <sck 5> <sck 4>)
                                (length <sck 0>) <sck 1>
                                go-home ))
                (iup-set-str-attribute text1 "VALUE" "") )
        (if (= (length ab) 0)
        then    (array-append ab [ 1 1 0 ]) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-print-info-on-selected-file (which)
        (deflocal path av text2 vidx ar dar s)

        (set path <_kv (+ "path" which)>)
        (set av <_kv (+ "av" which)>)
        (if (and (stringp path) (<> av undef))
        then    (set text2 <_kv "text2">)
                (set vidx (av-video-stream-idx av))
                (set ar (av-my-aspect-ratio which av))
                (iup-text-append-and-go-end text2
                        (+ $"movie" " " which ": " ))
                (iup-text-append-and-go-end-color text2 (blue)
                        (+ (fullpath->name path) nl) )
                (iup-text-append-and-go-end text2
                        (+ $"resolution" ": ") )
                (iup-text-append-and-go-end-color text2 (blue)
                        (sprint (width av) " x " (height av) nl) )
                (set dar (/ (width av) (height av)))
                (if (and (> ar 0) (<> ar 1))
                then    (set dar (* dar ar))
                        (iup-text-append-and-go-end text2
                                (+ $"display resolution" ": ") )
                        (iup-text-append-and-go-end-color text2 (blue)
                            (if (< ar 1)
                                (sprint (width av) " x " (rint (/ (height av) ar)) nl)
                                (sprint (rint (* (width av) ar)) " x " (height av) nl) )))
                (iup-text-append-and-go-end text2 (+
                    (if (cfg-get-or-default (+ "filter-ar" which "-auto") <_kv "default">)
                        ""
                        "(forced) " )
                    "display aspect ratio: " ))
                (iup-text-append-and-go-end-color text2 (blue)
                        (sprint (num dar) ":" (den dar) " = " (approx3 dar)
                                (dump-ar-circa dar (/ 4 3) "4:3")
                                (dump-ar-circa dar (/ 16 9) "16:9")
                                (dump-ar-circa dar 1.85 "1.85:1")
                                (dump-ar-circa dar 2.35 "2.35:1")
                                nl ))
                (iup-text-append-and-go-end text2 "framerate: ")
                (iup-text-append-and-go-end-color text2 (blue) (approx3 (av-frame-rate av)))
                (iup-text-append-and-go-end text2 (+ " fps" nl))
                (iup-text-append-and-go-end text2 (+ $"duration" ": "))
                (set s (* (av-duration av) (av-time-base av)))
                (iup-text-append-and-go-end-color text2 (blue) (date-s2hhmmss s))
                (iup-text-append-and-go-end text2 " (")
                (iup-text-append-and-go-end-color text2 (blue) (approx3 s))
                (iup-text-append-and-go-end text2 (+ " s)" nl))
                (iup-text-append-and-go-end text2 (+ $"approximate number of frames" ": "))
                (iup-text-append-and-go-end-color text2 (blue)
                        (sprint (- (av-approximated-number-of-frames av) 2) nl) )
                (iup-text-append-and-go-end text2 "codec: ")
                (iup-text-append-and-go-end-color text2 (blue) (av-codec-id av vidx))
                (iup-text-append-and-go-end text2 " (decoder: ")
                (iup-text-append-and-go-end-color text2 (blue) (av-codec-name av vidx))
                (iup-text-append-and-go-end text2 (+ ")" nl nl)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-text1-move1 (self)
        (gui-move-text1-on-current-value 1) )

(defnet gui-text1-move2 (self)
        (gui-move-text1-on-current-value 2) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-print-timestamps (which)
        (deflocal path av pix text2 vidx ts ts-prev ts-avg frameno cnt time-base)

        (set path <_kv (+ "path" which)>)
        (opt    (stringp path)
                (set av (if (cfg-get-or-default "cuvid-enabled" <_kv "default">) (av-avformat-open-input-cuvid path) (av-avformat-open-input path)))
                (<> av undef)
                (set text2 <_kv "text2">)
                (set vidx (av-video-stream-idx av))
                (iup-text-clear text2)
                (gui-print-info-on-selected-file which)

                (set ts-avg 0)
                (set frameno 0)
                (set cnt 0)
                (set time-base (av-time-base av vidx))
                (set pix (pix-create (width av) (height av)))

                (opt*   (av-read-frame av pix frameno)
                        (inc frameno)
                        (set ts (* (av-ts av) time-base))
                        (iup-text-append-and-go-end text2 (+ "[" (int->str (av-frameno av) 6 '0') "] " (approx4 ts)))
                        (if (rationalp ts-prev)
                        then    (inc ts-avg (- ts ts-prev))
                                (inc cnt)
                                (iup-text-append-and-go-end text2 " (diff: ")
                                (iup-text-append-and-go-end-color text2 (blue) (approx4 (- ts ts-prev)))
                                (iup-text-append-and-go-end text2 ")") )
                        (iup-text-append-and-go-end text2 (+ " " (approx4 (av-frameno2ts av (av-frameno av)))))
                        (if (not (av-is-frame-recoverable av))
                        then    (iup-text-append-and-go-end-color text2 (red) " *") )
                        (iup-text-append-and-go-end text2 nl)
                        (< (av-frameno av) 50)
                        (set ts-prev ts) )

                (close pix av)

                (set ts-avg (/ ts-avg cnt))
                (iup-text-append-and-go-end text2 "\naverage frame rate: ")
                (iup-text-append-and-go-end-color text2 (blue) (approx3 (/ 1 ts-avg)))
                (iup-text-append-and-go-end text2 " fps\n") ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-open-common (which path)
        (deflocal av n)

        (set av (if (cfg-get-or-default "cuvid-enabled" <_kv "default">)
                    (av-avformat-open-input-cuvid path)
                    (av-avformat-open-input path) ))
        (<> av undef)
        (alt    (seq    (set n (av-frame-rate av))
                        (rationalp n)
                        (> n 0)
                        (set n (av-approximated-number-of-frames av))
                        (integerp n)
                        (>= n 3) )
                (seq    (close av)
                        (fail) ))
        (set <_kv (+ "path" which)> path)
        (close <_kv (+ "av" which)>)
        (set <_kv (+ "av" which)> av)
        (iup-set-int <_kv (+ "spin" which)> "SPINMAX" (- n 2))
        (iup-set-int <_kv (+ "spin" which)> "SPINVALUE" 1)
        (gui-print-info-on-selected-file which) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-draw-keypoints-cb (self)
        (gui-update-image-low true) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-open1-cb (self)
        (gui-open-low self 1) )

(defnet gui-open2-cb (self)
        (gui-open-low self 2) )

(defnet gui-open-low (self which)
        (deflocal path)

        (opt    (set path (iup-choose-file-open self (+ $"Select movie " which) (cfg-get "path") undef true))
                (stringp path)
                (cfg-set "path" path)
                (alt    (gui-open-common which path)
                        (seq    (iup-error60 self (+ path $": movie not supported"))
                                (fail) ))
                (opt (sqlite3-exec _db undef
                        "INSERT INTO paths VALUES('"
                        (sqlite3-escape-strings path) "','"
                        (sqlite3-escape-strings (fullpath->name path)) "')" ))
                (gui-report)
                (gui-update-image)
                (gui-update) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-open-path1-cb (self)
        (gui-open-path-low self 1) )

(defnet gui-open-path2-cb (self)
        (gui-open-path-low self 2) )

(defnet gui-open-path-low (self which)
        (deflocal a i path)

        (opt    (set a (cons (queue) (queue)))
                (sqlite3-exec-data _db (netptr gui-open-path-cback) a
                        "SELECT path,name FROM paths ORDER BY path" )
                (if (= (length (cdr a)) 0)
                then    (iup-warning60 self $"There are no valid paths.")
                        (fail) )
                (set i (iup-choose-menu (cdr a)))
                (integerp i)
                (set path <(car a) i>)
                (alt    (gui-open-common which path)
                        (seq    (iup-error60 self (+ path $": movie not supported"))
                                (fail) ))
                (cfg-set "path" path)
                (gui-report)
                (gui-update-image)
                (gui-update) ))

(defnet gui-open-path-cback (a path name)
        (if (pathexists path)
        then    (queue-put (car a) path)
                (queue-put (cdr a) name) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-open-project-cb (self)
        (opt (gui-open-project-low self)) )

(defnet gui-open-project-low (self)
        (deflocal a i path)

        (set a (cons (queue) (queue)))
        (sqlite3-exec-data _db (netptr gui-open-project-cback) a
                "SELECT name,path1,path2 FROM projects ORDER BY name" )
        (if (= (length (car a)) 0)
        then    (iup-warning60 self $"There are no valid projects.")
                (fail) )
        (set i (iup-choose-menu (car a)))
        (integerp i)
        (set path (car <(cdr a) i>))
        (alt    (gui-open-common 1 path)
                (iup-error60 self (+ "can't open `" path "'")) )
        (set path (cdr <(cdr a) i>))
        (alt    (gui-open-common 2 path)
                (iup-error60 self (+ "can't open `" path "'")) )
        (gui-report)
        (gui-update-image)
        (gui-update) )

(defnet gui-open-project-cback (a name path1 path2)
        (if (and (pathexists path1) (pathexists path2))
        then    (queue-put (car a) name)
                (queue-put (cdr a) (cons path1 path2)) ))

(defnet gui-save-project-cb (self)
        (sqlite3-begin _db)
        (alt    (seq    (gui-save-project-low self)
                        (sqlite3-end _db) )
                (sqlite3-rollback _db) ))

(defnet gui-save-project-low (self)
        (deflocal path1 path2 name newname)

        (set path1 <_kv "path1">)
        (stringp path1)
        (set path2 <_kv "path2">)
        (stringp path2)
        (set path1 (sqlite3-escape-strings path1))
        (set path2 (sqlite3-escape-strings path2))
        (set name <(sqlite3-exec _db
                        "SELECT name FROM projects WHERE path1='" path1
                        "' AND path2='" path2 "' LIMIT 1") 0 0> )
        (if (stringp name)
        then    (set newname name)
                (iup-edit-string self $"Rename project" $"Project name" newname)
                (stringp newname)
                (<> newname "")
                (<> newname name)
                (alt    (sqlite3-exec _db undef
                            "UPDATE projects SET name='" (sqlite3-escape-strings newname)
                            "' WHERE name='" (sqlite3-escape-strings name) "'" )
                        (seq    (iup-confirm60 self (+ $"Project `" newname $"' exists. Do you want to overwrite it?"))
                                (sqlite3-exec _db undef
                                    "DELETE FROM projects WHERE name='" (sqlite3-escape-strings newname) "'")
                                (sqlite3-exec _db undef
                                    "UPDATE projects SET name='" (sqlite3-escape-strings newname)
                                    "' WHERE name='" (sqlite3-escape-strings name) "'" ))
                        (seq    (iup-error60 self "Database error")
                                (fail) ))
        else    (iup-edit-string self $"Save project" $"Project name" name)
                (stringp name)
                (<> name "")
                (alt    (sqlite3-exec _db undef
                            "INSERT INTO projects VALUES('" (sqlite3-escape-strings name)
                            "','" path1
                            "','" path2
                            "')" )
                        (seq    (iup-confirm60 self (+ $"Project `" name $"' exists. Do you want to overwrite it?"))
                                (sqlite3-exec _db undef
                                    "UPDATE projects SET path1='" path1
                                    "',path2='" path2
                                    "' WHERE name='" (sqlite3-escape-strings name) "'" ))
                        (seq    (iup-error60 self "Database error")
                                (fail) )))
        (iup-info60 self $"Project successfully saved.") )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-zoom-in-cb (self)
        (gui-zoom-low 1) )

(defnet gui-zoom-out-cb (self)
        (gui-zoom-low -1) )

(defnet gui-zoom-zero-cb (self)
        (deflocal incr)

        (set incr <_kv "zoom-level">)
        (if (<> incr 0)
        then    (gui-zoom-low -incr) ))

(defnet gui-zoom-low (incr)
        (opt    (= <_kv "zoom-lock"> undef)
                (set <_kv "zoom-lock"> 0)
                (opt (gui-zoom-low-low incr))
                (assoc-clr _kv "zoom-lock") ))

(defnet gui-zoom-low-low (incr)
        (deflocal pix w h)

        (set pix <_kv "pix">)
        (set w (width pix))
        (set h (height pix))
        (if (or (and (> incr 0) (or (>= w 4000) (>= h 6000)))
                (and (< incr 0) (or (<= w 40) (<= h 80))) )
        then    (iup-text-append-and-go-end <_kv "text2"> (+ "zoom in/out: limit reached" nl))
        else    (assoc-inc _kv "zoom-level" incr)
                (gui-resize-post)
                (set pix <_kv "pix">)
                (set w (width pix))
                (set h (height pix)) )
        (iup-text-append-and-go-end <_kv "text2"> (+
                "zoom level: " <_kv "zoom-level"> nl
                "display area: " w " x " h nl nl ))
        (gui-update) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-spin-cb (self v)
        (opt (gui-update-image)) )

(defnet gui-spin-kb-cb (self c)
        (alt    (seq    (= c (cmacro K_CR))
                        (opt (gui-update-image)) )
                (= c (cmacro K_SP))
                (in c (cmacro K_a) .. (cmacro K_z))
                (in c (cmacro K_A) .. (cmacro K_Z)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-text1-button-cb (self btn prs x y status)
        (opt    (= <_kv "th"> undef)
                (= btn (cmacro IUP_BUTTON1))
                (= prs 0)
                (gui-text1-button-cb-low self x y)) )

(defnet gui-text1-button-cb-low (self x y)
        (deflocal s p i t)

        (set s (iup-get-str-attribute self "VALUE"))
        (set p (iup-convert-xy-to-pos self x y))
        (set i p)
        (repeat (<= p (length s))
                (set t (sub 0 p s))
                until (= (utf8-length t) i)
                (inc p) )
        (opt    (search "\n" t i (maxint))
                (inc i)
                (set s (sub i (maxint) s))
                (dec p i) )
        (= <s 0> '[')
        (= <s 7> '-')
        (= <s 14> ']')
        (set x (str->num (sub 1 6 s)))
        (integerp x)
        (set y (str->num (sub 8 6 s)))
        (integerp y)
        (alt    (seq    (in p 1 .. 7)
                        (set i x) )
                (seq    (in p 8 .. 14)
                        (set i y) ))
        (opt    (set p (if (lmatch (sub 15 (maxint) s) "²") 2 1))
                (iup-set-int <_kv (+ "spin" p)> "SPINVALUE" i)
                (gui-sync-low p true) )
        (set i (iup-get-int self "CARETPOS"))
        (iup-set-str-attribute self "SELECTIONPOS" (sprint i ":" i)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-left-cb (self)
        (gui-sync-skip-low -1) )

(defnet gui-right-cb (self)
        (gui-sync-skip-low 1) )

(defnet gui-left-double-cb (self)
        (gui-sync-skip-low -(cfg-get-or-default-num "supervision-skip-double" <_kv "default">)) )

(defnet gui-right-double-cb (self)
        (gui-sync-skip-low (cfg-get-or-default-num "supervision-skip-double" <_kv "default">)) )

(defnet gui-left-first-cb (self)
        (deflocal n c i t p done pirr)

        (set n (iup-get-int <_kv "spin1"> "SPINVALUE"))
        (set c 1)
        (set done false)
        (set pirr false)
        (for i in <_kv "a-combo-goto"> do
                (set t <i 2>)
                (if (or (= t 1) (= t 3) (and (= t 0) (not pirr)))
                then    (set p <i 0>)
                        (if (> p n)
                        then    (set done true)
                        else    (set c p) ))
                until done
                (set pirr (= t 0)) )
        (gui-sync-skip-low (- c n)) )

(defnet gui-right-last-cb (self)
        (deflocal n c i t p done pirr)

        (set n (iup-get-int <_kv "spin1"> "SPINVALUE"))
        (set c (- (av-approximated-number-of-frames <_kv "av1">) 2))
        (set done false)
        (set pirr false)
        (for i in <_kv "a-combo-goto"> rev do
                (set t <i 2>)
                (if (or (= t 2) (= t 3) (and (= t 0) (not pirr)))
                then    (set p <i 0>)
                        (if (< p n)
                        then    (set done true)
                        else    (set c p) ))
                until done
                (set pirr (= t 0)) )
        (gui-sync-skip-low (- c n)) )

(defnet gui-sync-skip-low (n)
        (opt (gui-sync-skip-low-low n)) )

(defnet gui-sync-skip-low-low (n)
        (deflocal av1 av2 spin1 spin2 n1 n2 c)

        (<> n 0)
        (set av1 <_kv "av1">)
        (set av2 <_kv "av2">)
        (set spin1 <_kv "spin1">)
        (set spin2 <_kv "spin2">)
        (set n1 (+ n (iup-get-int spin1 "SPINVALUE")))
        (set n2 (+ n (iup-get-int spin2 "SPINVALUE")))
        (set c (min n1 n2))
        (if (< c 1)
        then    (set c (- 1 c))
                (inc n1 c)
                (inc n2 c) )
        (set c (min (- (av-approximated-number-of-frames av1) n1) (- (av-approximated-number-of-frames av2) n2)))
        (if (< c 2)
        then    (inc c -2)
                (inc n1 c)
                (inc n2 c) )
        (iup-set-int spin1 "SPINVALUE" n1)
        (iup-set-int spin2 "SPINVALUE" n2)
        (gui-update-image) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-sync1-cb (self)
        (opt (gui-sync-low 1 false)) )

(defnet gui-sync2-cb (self)
        (opt (gui-sync-low 2 false)) )

(defnet gui-sync-low (which force-update)
        (deflocal i0 i1 map spin1 spin2 n1 n2 p q n u ut prv i)

        (set i (cfg-get (key-map <_kv "av1">
                                 <_kv "av2">
                                 (fullpath->name <_kv "path1">)
                                 (fullpath->name <_kv "path2">) )))
        (<> i undef)
        (set i0 (- which 1))
        (set i1 (- 2 which))
        (set map (map-create <i i0> <i i1>))
        (set spin1 <_kv (+ "spin" which)>)
        (set spin2 <_kv (+ "spin" (- 3 which))>)
        (set n1 (iup-get-int spin1 "SPINVALUE"))
        (set n2 (iup-get-int spin2 "SPINVALUE"))
        (for i in <i 2> do
                (set p <i i0>)
                (set q <i i1>)
                (set n <i 2>)
                (if (in n1 p .. (+ p n -1))
                then    (set n (+ n1 q -p))
                        (or force-update (<> n n2))
                        (iup-set-int spin2 "SPINVALUE" n)
                        (gui-update-image)
                        (fail) )
                (map-bind-low (car map) p q n)
                (map-bind-low (cdr map) q p n) )
        (set u (map-undef-low (car map) (cdr map)))
        (set ut (queue-get u))
        (for i in (car map) do
                (set p <i 0>)
                (set q <i 1>)
                (set n <i 2>)
                (if (= n undef)
                then    (if (and (= p <ut 0>) (= q <ut 1>))
                        then    (if (in n1 p .. q)
                                then    (set n (min (max (+ <ut 2> n1 -p) <ut 2>) <ut 3>))
                                        (if (= n n2)
                                        then    (set n (min (max (+ <ut 3> n1 -q) <ut 2>) <ut 3>)) )
                                        (or force-update (<> n n2))
                                        (iup-set-int spin2 "SPINVALUE" n)
                                        (gui-update-image)
                                        (fail) )
                                (set ut (queue-get u))
                        else    (if (in n1 p .. q)
                                then    (set n (if (= prv undef) 1 prv))
                                        (or force-update (<> n n2))
                                        (iup-set-int spin2 "SPINVALUE" n)
                                        (gui-update-image)
                                        (fail) ))
                        (clr prv)
                else    (set prv (+ n q -p)) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-force-cb (self)
        (opt (gui-force-low self)) )

(defnet gui-force-low (self)
        (deflocal key k a map n1 n2 d p q n i)

        (set key (key-map <_kv "av1">
                          <_kv "av2">
                          (fullpath->name <_kv "path1">)
                          (fullpath->name <_kv "path2">) ))
        (set k (cfg-get key))
        (<> k undef)
        (set a <k 2>)
        (set n1 (iup-get-int <_kv "spin1"> "SPINVALUE"))
        (set n2 (iup-get-int <_kv "spin2"> "SPINVALUE"))
        (set map (map-create <k 0> <k 1>))
        (for i in a do
                (set p <i 0>)
                (set q <i 1>)
                (set n <i 2>)
                (if (in n1 p .. (+ p n -1))
                then    (set d (for-pos))
                        (if (= (+ n1 q -p) n2)
                        then    (iup-confirm60 self (sprint n1 $" is actually linked to " n2 "." nl
                                                            $"Do you want to remove the link?" ))
                                (array-remove a d)
                                (cfg-set key k)
                                (gui-report-low false)
                                (gui-move-text1-on-current-value 1)
                                (gui-update)
                                (fail) )
                else    (map-bind-low (car map) p q n)
                        (map-bind-low (cdr map) q p n) ))
        (set p false)
        (for i in (map-undef-low (car map) (cdr map)) do
                (set p (in n1 <i 0> .. <i 1>))
                until p )
        (if (not p)
        then    (iup-warning60 self (+ $"Can't link " n1 $" to " n2))
                (fail) )
        (if (not (in n2 <i 2> .. <i 3>))
        then    (iup-warning60 self (+ $"At the moment " n1 $" can only be mapped in ["
                        (int->str <i 2> 6 '0') "-" (int->str <i 3> 6 '0') "]." ))
                (fail) )
        (iup-confirm60 self (sprint n1 $" will be linked to " n2 ". " $"Are you sure?"
                                    (if (integerp d) $"\nNOTE: a previously established link will be removed." "") ))
        (if (integerp d)
        then    (array-remove a d) )
        (array-append a (list n1 n2 1))
        (cfg-set key k)
        (gui-report-low false)
        (gui-move-text1-on-current-value 1)
        (gui-update) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-scd-left1-cb (self)
        (gui-scd-move-low 1 true) )

(defnet gui-scd-right1-cb (self)
        (gui-scd-move-low 1 false) )

(defnet gui-scd-left2-cb (self)
        (gui-scd-move-low 2 true) )

(defnet gui-scd-right2-cb (self)
        (gui-scd-move-low 2 false) )

(defnet gui-scd-move-low (which left)
        (opt (gui-scd-move-low-low which left)) )

(defnet gui-scd-move-low-low (which left)
        (deflocal av scd thres sp o n)

        (set av <_kv (+ "av" which)>)
        (set scd (cfg-get (key-scd av (fullpath->name <_kv (+ "path" which)>))))
        (listp scd)
        (set scd <scd 4>)
        (set thres (iup-text-spin-ratio-val <_kv (+ "scd-spin" which)>))
        (set sp <_kv (+ "spin" which)>)
        (set o (iup-get-int sp "SPINVALUE"))
        (if left
        then    (for n in 1 .. (- o 1) rev do
                        (if (>= <scd n> thres)
                        then    (iup-set-int sp "SPINVALUE" n)
                                (gui-update-image)
                                (fail) ))
        else    (for n in (+ o 1) .. (- (av-approximated-number-of-frames av) 2) do
                        (if (>= <scd n> thres)
                        then    (iup-set-int sp "SPINVALUE" n)
                                (gui-update-image)
                                (fail) ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-text1-cb (self)
        (iup-text-clear <_kv "text1">)
        (gui-update) )

(defnet gui-clear-text2-cb (self)
        (iup-text-clear <_kv "text2">)
        (gui-update) )

(defnet gui-print-selected-cb (self)
        (gui-print-info-on-selected-file 1)
        (gui-print-info-on-selected-file 2)
        (gui-update) )

(defnet gui-print-valid-paths-cb (self)
        (gui-print-paths-low false) )

(defnet gui-print-obsolete-paths-cb (self)
        (gui-print-paths-low true) )

(defnet gui-print-paths-low (obsolete)
        (deflocal text2 a)

        (set text2 <_kv "text2">)
        (set a (array 3))
        (set <a 0 > 0)
        (set <a 1 > text2)
        (set <a 2 > obsolete)
        (iup-text-set-and-go-end text2 (+ (if obsolete $"Obsolete paths" $"Valid paths") ":" nl nl))
        (sqlite3-exec-data _db (netptr gui-print-paths-cback) a
                "SELECT path FROM paths ORDER BY path" )
        (if (= <a 0> 0)
        then    (iup-text-append-and-go-end text2 (+ (if obsolete $"There are no obsolete paths." $"There are no valid paths.") nl)) )
        (gui-update) )

(defnet gui-print-paths-cback (a path)
        (deflocal x)

        (set x (pathexists path))
        (if <a 2>
        then    (set x (not x)) )
        (if x
        then    (inc <a 0>)
                (iup-text-append-and-go-end <a 1> (+ "[" (int->str <a 0> 5 '0') "] " path nl)) ))

(defnet gui-print-obsolete-projects-cb (self)
        (deflocal text2 a)

        (set text2 <_kv "text2">)
        (set a (array 2))
        (set <a 0 > 0)
        (set <a 1 > text2)
        (iup-text-set-and-go-end text2 (+ $"Obsolete projects" ":" nl nl))
        (sqlite3-exec-data _db (netptr gui-print-obsolete-projects-cback) a
                "SELECT name,path1,path2 FROM projects ORDER BY name" )
        (if (= <a 0> 0)
        then    (iup-text-append-and-go-end text2 (+ $"There are no obsolete projects." nl)) )
        (gui-update) )

(defnet gui-print-obsolete-projects-cback (a name path1 path2)
        (if (or (not (pathexists path1)) (not (pathexists path2)))
        then    (inc <a 0>)
                (iup-text-append-and-go-end <a 1> (+ "[" (int->str <a 0> 5 '0') "] " name nl)) ))

(defnet gui-print-timestamps1-cb (self)
        (gui-print-timestamps 1) )

(defnet gui-print-timestamps2-cb (self)
        (gui-print-timestamps 2) )

(defnet gui-restore-default-cb (self)
        (opt (gui-restore-default-low self)) )

(defnet gui-restore-default-low (self)
        (deflocal i)

        (iup-confirm60 self (+ $"Default parameters will be restored." nl $"Are you sure?"))
        (sqlite3-begin _db)
        (alt    (seq    (for i in (default-parameters) do
                                (cfg-set (car i) (cdr i)) )
                        (sqlite3-end _db)
                        (gui-update-image) )
                (seq    (sqlite3-rollback _db)
                        (iup-error60 self "errore nel salvataggio configurazione") )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-save-text1-cb (self)
        (opt (gui-save-text-low self 1)) )

(defnet gui-save-text2-cb (self)
        (opt (gui-save-text-low self 2)) )

(defnet gui-save-text-low (self which)
        (deflocal path f s)

        (set path (cfg-get "save-path"))
        (if (not (stringp path))
        then    (set path (cfg-get "path")) )
        (set path (iup-choose-file-save self
                (+ "Save" ' ' <[ "top" "bottom" ] (- which 1)> " text as...")
                path
                (+ "info-text" which ".txt")
                true ))
        (stringp path)

        (set f (fcreate path))
        (if (= f undef)
        then    (iup-error60 self (+ $"Creation of file `" path $"' failed."))
                (fail) )
        (cfg-set "save-path" path)
        (set s (iup-get-str-attribute <_kv (+ "text" which)> "VALUE"))
        (if (<> (utf8-length s) (length s))
        then    (set s (+ (utf8-bom) s)) )
        (fprint f
                (if (cms-windows)
                        (find-and-replace s "\n" "\r\n")
                        s )
                (if (cms-windows)
                        "\r\n"
                        nl ))
        (close f) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-save-frame1-cb (self)
        (opt (gui-save-frame-low self 1)) )

(defnet gui-save-frame2-cb (self)
        (opt (gui-save-frame-low self 2)) )

(defnet gui-save-frame-low (self which)
        (deflocal path n av pix)

        (set path (cfg-get "save-path"))
        (if (not (stringp path))
        then    (set path (cfg-get "path")) )
        (set n (iup-get-int <_kv (+ "spin" which)> "SPINVALUE"))
        (set path (iup-choose-file-save self
                (+ $"Save frame " which $" as...")
                path
                (+ "movie-" which "-frame-" (int->str n 6 '0') ".png")
                true ))
        (stringp path)

        (cfg-set "save-path" path)
        (set av <_kv (+ "av" which)>)
        (set pix (pix-create (width av) (height av)))
        (alt    (av-read-frame av pix n)
                (pix-clear pix) )
        (if (rmatch case path ".jpg" ".jpeg")
        then    (pix-save-jpg pix path)
        else    (pix-save-png pix path) )
        (close pix) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-swap-order-cb (self)
        (opt (gui-swap-order-low self)) )

(defnet gui-swap-order-low (self)
        (deflocal a1 a2 p1 p2 n1 n2)

        (set a1 <_kv "av1">)
        (<> a1 undef)
        (set a2 <_kv "av2">)
        (<> a2 undef)
        (set p1 <_kv "path1">)
        (set p2 <_kv "path2">)
        (set <_kv "av1"> a2)
        (set <_kv "av2"> a1)
        (set <_kv "path1"> p2)
        (set <_kv "path2"> p1)
        (set p1 <_kv "spin1">)
        (set p2 <_kv "spin2">)
        (set n1 (iup-get-int p1 "SPINVALUE"))
        (set n2 (iup-get-int p2 "SPINVALUE"))
        (set a1 (iup-get-int p1 "SPINMAX"))
        (set a2 (iup-get-int p2 "SPINMAX"))
        (iup-set-int p1 "SPINMAX" a2)
        (iup-set-int p2 "SPINMAX" a1)
        (iup-set-int p1 "SPINVALUE" n2)
        (iup-set-int p2 "SPINVALUE" n1)
        (gui-report)
        (gui-print-selected-cb self)
        (gui-update-image) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-import-from-cfg-cb (self)
        (sqlite3-begin _db)
        (alt    (seq    (gui-import-from-cfg-low self)
                        (sqlite3-end _db) )
                (sqlite3-rollback _db) ))

(defnet gui-import-from-cfg-low (self)
        (deflocal path db a msg)

        (set path (iup-choose-file-open self $"Select cfg" (if (cmingw) (callpath) (datapath)) "CFG Files|*.cfg|All Files|*.*|" true))
        (stringp path)
        (set db (sqlite3-open path))
        (if (= db undef)
        then    (iup-error60 self (+ "SQLite3 cannot open `" path "'"))
                (fail) )
        (set a (array default 0 5 2))
        (opt (sqlite3-exec-data db (netptr gui-import-from-cfg-cback1) a "SELECT path,name FROM paths"))
        (opt (sqlite3-exec-data db (netptr gui-import-from-cfg-cback2) a "SELECT name,path1,path2 FROM projects"))
        (opt (sqlite3-exec-data db (netptr gui-import-from-cfg-cback3) a "SELECT key,value FROM config"))
        (close db)
        (set msg (+
            "imported paths: " <a 0 0> "/" <a 0 1> nl
            "imported projects: " <a 1 0> "/" <a 1 1> nl
            "imported scd data: " <a 2 0> "/" <a 2 1> nl
            "imported sift check data: " <a 3 0> "/" <a 3 1> nl
            "imported mapping data: " <a 4 0> "/" <a 4 1> nl
            nl ))
        (iup-text-append-and-go-end <_kv "text2"> msg)
        (iup-info60 self msg) )

(defnet gui-import-from-cfg-cback1 (a path name)
        (inc <a 0 1>)
        (opt    (sqlite3-exec _db undef
                    "INSERT INTO paths VALUES('" (sqlite3-escape-strings path)
                    "','" (sqlite3-escape-strings name) "')" )
                (inc <a 0 0>) ))

(defnet gui-import-from-cfg-cback2 (a name path1 path2)
        (inc <a 1 1>)
        (opt    (set path1 (sqlite3-escape-strings path1))
                (set path2 (sqlite3-escape-strings path2))
                (= (str->num <(sqlite3-exec _db "SELECT count(*) FROM projects WHERE path1='" path1 "' AND path2='" path2 "'") 0 0>) 0)
                (sqlite3-exec _db undef
                    "INSERT INTO projects VALUES('" (sqlite3-escape-strings name)
                    "','" path1 "','" path2 "')" )
                (inc <a 1 0>) ))

(defnet gui-import-from-cfg-cback3 (a key value)
        (deflocal i)

        (opt    (lmatch setidx i key "scd-" "sck-" "map-")
                (= (length key) (if (= i 0) 44 84))
                (inc i 2)
                (inc <a i 1>)
                (not (stringp value))
                (sqlite3-exec _db undef
                            "INSERT INTO config VALUES('" (sqlite3-escape-strings key)
                            "','" value "')" )
                (inc <a i 0>) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-scd1-cb (self)
        (opt (gui-clear-scd-low self 1)) )

(defnet gui-clear-scd2-cb (self)
        (opt (gui-clear-scd-low self 2)) )

(defnet gui-clear-scd-low (self which)
        (deflocal av key)

        (set av <_kv (+ "av" which)>)
        (<> av undef)
        (set key (key-scd av (fullpath->name <_kv (+ "path" which)>)))
        (truep (cfg-exists key))
        (iup-confirm60 self
                (+ $"The \"scd\" data for movie" ' ' which ' ' $"will be deleted." nl $"Are you sure?") )
        (cfg-clr key)
        (gui-update) )

(defnet gui-clear-sck-cb (self)
        (opt (gui-clear-sck-low self)) )

(defnet gui-clear-sck-low (self)
        (deflocal av1 av2 key)

        (set av1 <_kv "av1">)
        (<> av1 undef)
        (set av2 <_kv "av2">)
        (<> av2 undef)
        (set key (key-sck av1 av2
                (fullpath->name <_kv "path1">)
                (fullpath->name <_kv "path2">) ))
        (truep (cfg-exists key))
        (iup-confirm60 self
                (+ $"The \"sift check\" data will be deleted." nl $"Are you sure?") )
        (cfg-clr key)
        (gui-update) )

(defnet gui-clear-failed-sck-cb (self)
        (opt (gui-clear-failed-sck-low self)) )

(defnet gui-clear-failed-sck-low (self)
        (deflocal av1 av2 key sck cache i)

        (set av1 <_kv "av1">)
        (<> av1 undef)
        (set av2 <_kv "av2">)
        (<> av2 undef)
        (set key (key-sck av1 av2
                (fullpath->name <_kv "path1">)
                (fullpath->name <_kv "path2">) ))
        (set sck (cfg-get key))
        (<> sck undef)
        (set cache <sck 0>)
        (set i (- (length cache) <sck 1>))
        (if (= i 0)
        then    (iup-info60 self $"There are no failed checks.")
                (fail) )
        (iup-confirm60 self (+ (if (= i 1) $"1 failed check will be deleted."
                (sprint i $" failed checks will be deleted." )) nl $"Are you sure?" ))
        (for i in cache do
                (if (booleanp (cdr i))
                then    (if (not (cdr i))
                        then    (assoc-clr cache (car i)) )))
        (cfg-set key sck)
        (gui-report) )

(defnet gui-clear-map-cb (self)
        (opt (gui-clear-map-low self)) )

(defnet gui-clear-map-low (self)
        (deflocal av1 av2 key)

        (set av1 <_kv "av1">)
        (<> av1 undef)
        (set av2 <_kv "av2">)
        (<> av2 undef)
        (set key (key-map av1 av2
                (fullpath->name <_kv "path1">)
                (fullpath->name <_kv "path2">) ))
        (truep (cfg-exists key))
        (iup-confirm60 self
                (+ $"The \"mapping\" data will be deleted." nl $"Are you sure?") )
        (cfg-clr key)
        (gui-report)
        (gui-update) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-paths-cb (self)
        (opt (gui-clear-paths-low self)) )

(defnet gui-clear-paths-low (self)
        (deflocal q l)

        (set q (queue))
        (sqlite3-exec-data _db (netptr gui-clear-paths-cback) q
                "SELECT path FROM paths" )
        (set l (length q))
        (if (= l 0)
        then    (iup-info60 self $"There are no obsolete paths.")
                (fail) )
        ;(print (sprintl q nl) nl)
        (iup-confirm60 self (sprint l ' ' (if (= l 1) $"obsolete path will be deleted." $"obsolete paths will be deleted.") nl
                                    $"Are you sure?" ))
        (sqlite3-exec _db undef
                "DELETE FROM paths WHERE path IN('"
                (sprintl q "','") "')" )
        (gui-update) )

(defnet gui-clear-paths-cback (q path)
        (if (not (pathexists path))
        then    (queue-put q (sqlite3-escape-strings path)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-projects-cb (self)
        (opt (gui-clear-projects-low self)) )

(defnet gui-clear-projects-low (self)
        (deflocal q l)

        (set q (queue))
        (sqlite3-exec-data _db (netptr gui-clear-projects-cback) q
                "SELECT name,path1,path2 FROM projects" )
        (set l (length q))
        (if (= l 0)
        then    (iup-info60 self $"There are no obsolete projects.")
                (fail) )
        ;(print (sprintl q nl) nl)
        (iup-confirm60 self (sprint l ' ' (if (= l 1) $"obsolete project will be deleted." $"obsolete projects will be deleted.") nl
                                    $"Are you sure?" ))
        (sqlite3-exec _db undef
                "DELETE FROM projects WHERE name IN('"
                (sprintl q "','") "')" )
        (gui-update) )

(defnet gui-clear-projects-cback (q name path1 path2)
        (if (or (not (pathexists path1)) (not (pathexists path2)))
        then    (queue-put q (sqlite3-escape-strings name)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-data-and-vacuum-cb (self)
        (opt (gui-clear-data-and-vacuum-low self)) )

(defnet gui-clear-data-and-vacuum-low (self)
        (deflocal a q l)

        (set a (assoc))
        (set q (queue))
        (set <a undef> true) ; può sembrare strano ma serve
        (sqlite3-exec-data _db (netptr gui-clear-data-and-vacuum-cback1) a
                "SELECT path,name FROM paths" )
        (sqlite3-exec-data _db (netptr gui-clear-data-and-vacuum-cback2) (cons a q)
                "SELECT key FROM config" )
        (set l (length q))
        (if (= l 0)
        then    (iup-info60 self $"There are no obsolete data.")
                (fail) )
        ;(gui-clear-data-and-vacuum-tmp q)
        (iup-confirm60 self (+ (if (= l 1) $"1 obsolete data will be deleted."
                               (sprint l $" obsolete data will be deleted.") ) nl
                             $"Are you sure?" ))
        (sqlite3-exec _db undef
                "DELETE FROM config WHERE key IN('"
                (sprintl q "','") "')" )
        (sqlite3-exec _db undef "VACUUM") )

;(defnet gui-clear-data-and-vacuum-tmp (q)
;        (deflocal i)
;
;        (for i in q do
;                (opt    (lmatch i "scd-")
;                        (print <(cfg-get i) 3> nl) )))

(defnet gui-clear-data-and-vacuum-cback1 (a path name)
        (deflocal av)

        (if (pathexists path)
        then    (set av (av-avformat-open-input path))
                (if (<> av undef)
                then    (set <a (key-basic av name)> true)
                        (close av) )))

(defnet gui-clear-data-and-vacuum-cback2 (a key)
        (deflocal q l code1 code2)

        (set q (cdr a))
        (set a (car a))
        (if (in (length key) [ 44 84 ])
        then    (set code1 (sub  4 40 key))
                (set code2 (sub 44 40 key)) )
        (case (sub 0 4 key) of
                "scd-"  (if (not (in code1 a))
                        then    (queue-put q key) )
                "sck-"  (if (or (not (in code1 a)) (not (in code2 a)))
                        then    (queue-put q key) )
                "map-"  (if (or (not (in code1 a)) (not (in code2 a)))
                        then    (queue-put q key) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-report-failed-cb (self)
        (gui-disable-menu)
        (opt (gui-report-failed-low self))
        (gui-enable-menu) )

(defnet gui-report-failed-low (self)
        (deflocal av1 av2 key sck a i)

        (set av1 <_kv "av1">)
        (<> av1 undef)
        (set av2 <_kv "av2">)
        (<> av2 undef)
        (set key (key-sck av1 av2
                (fullpath->name <_kv "path1">)
                (fullpath->name <_kv "path2">) ))
        (set sck (cfg-get key))
        (<> sck undef)
        (set a <sck 0>)
        (set i (- (length a) <sck 1>))
        (if (= i 0)
        then    (iup-info60 self $"There are no failed checks.")
                (fail) )
        (iup-text-clear <_kv "text2">)
        (gui-start-low (netptr gui-start-failed-thread)) )

(defnet gui-start-cb (self)
        (gui-disable-menu)
        (opt (gui-start-low (netptr gui-start-thread)))
        (gui-enable-menu) )

(defnet gui-start-low (net)
        (deflocal th text1 text2 finished req msg)

        (= <_kv "th"> undef)
        (<> <_kv "av1"> undef)
        (<> <_kv "av1"> undef)
        (set th (thread-create net
                        (thread-self)
                        (fullpath->name <_kv "path1">)
                        (fullpath->name <_kv "path2">)
                        <_kv "av1">
                        <_kv "av2">
                        <_kv "pix">
                        <_kv "default"> ))
        (<> th undef)
        (set <_kv "th"> th)
        (set <_kv "start-time"> (now))
        (set <_kv "abort"> false)
        (gui-update)
        (set text1 <_kv "text1">)
        (set text2 <_kv "text2">)
        (set finished false)
        (repeat (opt*   (receivenb msg from th)
                        (set req (car msg))
                        (set msg (cdr msg))
                        (case req of
                                "d"     (seq    (gui-draw-image)
                                                (send true to th) )
                                "c1"    (iup-text-set-and-go-home text1 msg)
                                "p1"    (iup-text-append-and-go-end text1 msg)
                                "p1c"   (iup-text-append-and-go-end-color text1 (car msg) (cdr msg))
                                "h1"    (iup-text-append-and-go-home text1 msg)
                                "c2"    (iup-text-set-and-go-end text2 msg)
                                "p2"    (iup-text-append-and-go-end text2 msg)
                                "p2c"   (iup-text-append-and-go-end-color text2 (car msg) (cdr msg))
                                "q"     (seq    (set <_kv "abort"> msg)
                                                (set finished true) )))
                until finished
                (iup-flush)
                (sleep 0.05) )
        (iup-text-append-and-go-end text2 (+ "\n" $"elapsed time" ": "
                (date-s2hhmmss (- (now) <_kv "start-time">)) nl ))
        (if <_kv "abort">
        then    (iup-text-append-and-go-end text2 (+ $"Aborted" nl)) )
        (thread-join th)
        (assoc-clr _kv "th")
        (gui-report)
        (gui-update)
        (gui-resize-post) )

(defnet gui-start-thread (th-main name1 name2 av1 av2 pix default-info)
        (deflocal abort scd1 scd2)

        (set abort true)
        (opt    (scdscan th-main name1 av1 pix default-info scd1)
                (scdscan th-main name2 av2 pix default-info scd2)
                (match th-main name1 name2 av1 av2 scd1 scd2 pix default-info)
                (set abort false) )
        (send (cons "q" abort) to th-main) )

(defnet gui-start-failed-thread (th-main name1 name2 av1 av2 pix default-info)
        (deflocal abort scd1 scd2 m cache score i)

        (set abort true)
        (opt    (scdscan th-main name1 av1 pix default-info scd1)
                (scdscan th-main name2 av2 pix default-info scd2)
                (pix-wip pix)
                (gui-draw-image-th th-main)
                (set m (match-create name1 name2 av1 av2 scd1 scd2 th-main pix default-info))
                (map-report m)
                (set cache (match-cache m))
                (for i in cache do
                        (if (booleanp (cdr i))
                        then    (if (not (cdr i))
                                then    (msg-log m nl)
                                        (assoc-clr cache (car i))
                                        (opt (sift-check true m (str->num (sub 0 6 (car i))) (str->num (sub 6 6 (car i))) score)) ))
                        until (match-abort m) )
                (match-destroy m false)
                (set abort false) )
        (send (cons "q" abort) to th-main) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-draw-image-th (th-main)
        (deflocal msg)

        (send [ "d" . undef ] to th-main)
        (receive msg from th-main)
        (if (not msg)
        then    (receive msg from th-main)
                (fail) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-abort-cb (self)
        (opt (gui-abort-low self)) )

(defnet gui-abort-low (self)
        (deflocal th)

        (not <_kv "abort">)
        (set th <_kv "th">)
        (<> th undef)
        (iup-confirm60 self
                (+ $"The current operation will be aborted." nl $"Are you sure?") )
        (set <_kv "abort"> true)
        (sendbuf 100 false to th) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

