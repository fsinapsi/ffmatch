;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-setup (info)
        (deflocal win vb hb w)

        (set <info "abort"> false)
        (set <info "supervision"> false)

        (set win (gtk-window-new (cmacro GTK_WINDOW_TOPLEVEL)))
        (gtk-window-set-title win (+ "FFmatch (" (version) ")"))
        (gtk-container-set-border-width win 4)
        (gtk-signal-connect win "delete-event" (netptr gui-delete) info)
        (gtk-signal-connect win "destroy" (netptr gtk-destroy))

        (set <info "w-win"> win)

        (set vb (gtk-vbox-new false 5))
        (gtk-container-add win vb)

                (gui-setup-menu-bar info w)
                (gtk-box-pack-start vb w false false 0)

                (gui-setup-toolbar info w)
                (gtk-box-pack-start vb w false false 0)

                (set hb (gtk-hbox-new false 5))
                (gtk-box-pack-start vb hb true true 0)

                        (gui-setup-image info w)
                        (gtk-box-pack-start hb w false false 0)

                        (gui-setup-text info w)
                        (gtk-box-pack-start hb w true true 0)

        (gtk-window-set-default-size win (min 860 (- (gtk-width) 20)) 10)
        (gtk-window-set-position win (cmacro GTK_WIN_POS_CENTER))
        (gtk-widget-show-all win)
        (gui-update info) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-setup-menu-bar (info @w)
        (deflocal menu-info item menu i)

        (set menu-info (assoc))
        (set @w (gtk-menu-bar-new))
        (set <info "w-menu"> @w)
        (set <info "w-menu-bar"> menu-info)

        (set item (gtk-menu-item-new "File"))

        (set menu (gtk-menu-new))

                (set i (gtk-menu-item-new $"Select movie 1"))
                (gtk-signal-connect i "activate" (netptr gui-open-file1) info)
                (gtk-menu-shell-append menu i)

                (set i (gtk-menu-item-new $"Select movie 2"))
                (gtk-signal-connect i "activate" (netptr gui-open-file2) info)
                (gtk-menu-shell-append menu i)

                (set i (gtk-menu-item-new $"Swap order"))
                (gtk-signal-connect i "activate" (netptr gui-swap-order) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "swap-order"> i)

                (set i (gtk-menu-item-new $"Save top text as..."))
                (gtk-signal-connect i "activate" (netptr gui-save-text) info 1)
                (gtk-menu-shell-append menu i)
                (set <menu-info "save-text1"> i)

                (set i (gtk-menu-item-new $"Save bottom text as..."))
                (gtk-signal-connect i "activate" (netptr gui-save-text) info 2)
                (gtk-menu-shell-append menu i)
                (set <menu-info "save-text2"> i)

                (set i (gtk-menu-item-new $"Save frame 1 as..."))
                (gtk-signal-connect i "activate" (netptr supervision-save-frame) info 1)
                (gtk-menu-shell-append menu i)
                (set <menu-info "save-frame1"> i)

                (set i (gtk-menu-item-new $"Save frame 2 as..."))
                (gtk-signal-connect i "activate" (netptr supervision-save-frame) info 2)
                (gtk-menu-shell-append menu i)
                (set <menu-info "save-frame2"> i)

                (set i (gtk-menu-item-new $"Preferences"))
                (gtk-signal-connect i "activate" (netptr cfg) info)
                (gtk-menu-shell-append menu i)

                (set i (gtk-menu-item-new $"Exit"))
                (gtk-signal-connect i "activate" (netptr gui-exit) info)
                (gtk-menu-shell-append menu i)

        (gtk-menu-item-set-submenu item menu)
        (gtk-menu-shell-append @w item)

        (set item (gtk-menu-item-new $"Clear"))

        (set menu (gtk-menu-new))

                (set i (gtk-menu-item-new $"Clear \"scd\" data 1"))
                (gtk-signal-connect i "activate" (netptr gui-clear-scd1) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "clear-scd1"> i)

                (set i (gtk-menu-item-new $"Clear \"scd\" data 2"))
                (gtk-signal-connect i "activate" (netptr gui-clear-scd2) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "clear-scd2"> i)

                (set i (gtk-menu-item-new $"Clear \"sift check\" data"))
                (gtk-signal-connect i "activate" (netptr gui-clear-sck) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "clear-sck"> i)

                (set i (gtk-menu-item-new $"Clear failed checks"))
                (gtk-signal-connect i "activate" (netptr gui-clear-failed-sck) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "clear-failed-sck"> i)

                (set i (gtk-menu-item-new $"Clear \"mapping\" data"))
                (gtk-signal-connect i "activate" (netptr gui-clear-map) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "clear-map"> i)

                (set i (gtk-menu-item-new $"Clear obsolete paths"))
                (gtk-signal-connect i "activate" (netptr gui-clear-paths) info)
                (gtk-menu-shell-append menu i)

                (set i (gtk-menu-item-new $"Clear obsolete data"))
                (gtk-signal-connect i "activate" (netptr gui-clear-data-and-vacuum) info)
                (gtk-menu-shell-append menu i)

                (set i (gtk-menu-item-new $"Clear top text"))
                (gtk-signal-connect i "activate" (netptr gui-clear-text1) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "clear-text1"> i)

                (set i (gtk-menu-item-new $"Clear bottom text"))
                (gtk-signal-connect i "activate" (netptr gui-clear-text2) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "clear-text2"> i)

        (gtk-menu-item-set-submenu item menu)
        (gtk-menu-shell-append @w item)

        (set item (gtk-menu-item-new "Misc"))

        (set menu (gtk-menu-new))

                (set i (gtk-menu-item-new $"Print selected movie names"))
                (gtk-signal-connect i "activate" (netptr gui-print-selected) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "print-selected"> i)

                (set i (gtk-menu-item-new $"Report failed checks"))
                (gtk-signal-connect i "activate" (netptr gui-report-failed) info)
                (gtk-menu-shell-append menu i)
                (set <menu-info "report-failed"> i)

                (set i (gtk-menu-item-new $"Restore default parameters"))
                (gtk-signal-connect i "activate" (netptr gui-restore-default) info)
                (gtk-menu-shell-append menu i)

        (gtk-menu-item-set-submenu item menu)
        (gtk-menu-shell-append @w item) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-setup-toolbar (info @w)
        (deflocal btn-info)

        (set btn-info (assoc))
        (set <info "w-toolbar"> btn-info)
        (set @w (gtk-hbox-new false 0))

        (gui-setup-button info $"select movie 1" @w
                (pix-load-static "icons/22x22/document-open-5.png")
                (netptr gui-open-file1)
                btn-info
                "open1" )

        (gui-setup-button info $"select movie 2" @w
                (pix-load-static "icons/22x22/document-open-5.png")
                (netptr gui-open-file2)
                btn-info
                "open2" )

        (gui-setup-button info $"start" @w
                (pix-load-static "icons/22x22/system-run-3.png")
                (netptr gui-start-main)
                btn-info
                "start" )

        (gui-setup-button info $"abort" @w
                (pix-load-static "icons/22x22/process-stop-2.png")
                (netptr gui-abort)
                btn-info
                "abort" )

        (gui-setup-toggle-button info $"supervisor mode on/off" @w
                (pix-load-static "icons/22x22/document-edit.png")
                (netptr supervision)
                btn-info
                "supervision" )

        (gui-setup-button info $"audio tracks" @w
                (pix-load-static "icons/22x22/audio-headset.png")
                (netptr audio)
                btn-info
                "audio" )

        (gui-setup-button info $"preferences" @w
                (pix-load-static "icons/22x22/configure-2.png")
                (netptr cfg)
                btn-info
                "prefs" ))

(defnet gui-setup-button (info tip box pix net btn-info key)
        (gui-setup-button-basic info tip box pix net btn-info key false) )

(defnet gui-setup-toggle-button (info tip box pix net btn-info key)
        (gui-setup-button-basic info tip box pix net btn-info key true) )

(defnet gui-setup-button-basic (info tip box pix net btn-info key toggle)
        (deflocal btn)

        (if toggle
        then    (set btn (gtk-toggle-button-new))
        else    (set btn (gtk-button-new)) )
        (gtk-box-pack-start box btn false false 0)
        (gtk-container-add btn (gtk-image-new-from-pixbuf pix))
        (gtk-signal-connect btn (if toggle "toggled" "clicked") net info)
        (if (<> tip undef)
        then    (gtk-widget-set-tooltip-text btn tip) )
        (if (<> btn-info undef)
        then    (set <btn-info key> btn) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-setup-image (info @w)
        (deflocal pix)

        (set @w (gtk-image-new (w) (h)))
        (set <info "w-image"> @w)
        (set pix (pix-create (w) (h)))
        (set <info "pix"> pix)
        (pix-logo pix)
        (gtk-image-set-from-pixbuf @w pix) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-setup-text (info @w)
        (deflocal vb hb w text)

        (set @w (gtk-vbox-new false (space)))

        (set w (gtk-scrolled-window-new undef undef))
        (gtk-box-pack-start @w w true true 0)
        (gtk-scrolled-window-set-policy w
                (cmacro GTK_POLICY_AUTOMATIC)
                (cmacro GTK_POLICY_AUTOMATIC) )

        (set text (gtk-text-view-new))
        (gtk-container-add w text)
        (gtk-text-view-set-editable text false)
        (gtk-text-view-set-cursor-visible text false)
        (gtk-text-view-set-wrap-mode text (cmacro GTK_WRAP_NONE))
        (set <info "w-text1"> text)

        (set vb (gtk-vbox-new false 6))
        (gtk-box-pack-start @w vb false false 0)
        (set <info "w-supervision-toolbar"> vb)

        (set hb (gtk-hbox-new false 0))
        (gtk-box-pack-start vb hb false false 0)

                (set w (gtk-combo-box-text-new))
                (gtk-box-pack-start hb w false false 0)
                (set text (array 0))
                (gtk-signal-connect w "changed" (netptr supervision-goto) info w text)
                (array-append text [ 1 1 0 ])
                (gtk-combo-box-text-append-text w "(000001)")
                (set <info "a-combo-goto"> text)
                (set <info "w-combo-goto"> w)

                (set w (gtk-spin-button-new-with-range 1 100000 1))
                (gtk-spin-button-set-value w 0)
                (gtk-spin-button-set-numeric w true)
                (gtk-box-pack-start hb w true true 4)
                (gtk-signal-connect w "value-changed" (netptr supervision-pix-with-check) info)
                (set <info "w-spin1"> w)

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/go-first-view.png")
                        (netptr supervision-left-first)
                        undef undef )

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/go-previous-view.png")
                        (netptr supervision-left-double)
                        undef undef )

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/go-previous-7.png")
                        (netptr supervision-left)
                        undef undef )

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/go-next-7.png")
                        (netptr supervision-right)
                        undef undef )

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/go-next-view.png")
                        (netptr supervision-right-double)
                        undef undef )

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/go-last-view.png")
                        (netptr supervision-right-last)
                        undef undef )

                (set w (gtk-spin-button-new-with-range 1 100000 1))
                (gtk-spin-button-set-value w 0)
                (gtk-spin-button-set-numeric w true)
                (gtk-box-pack-start hb w true true 4)
                (gtk-signal-connect w "value-changed" (netptr supervision-pix-with-check) info)
                (set <info "w-spin2"> w)

        (set hb (gtk-hbox-new false 0))
        (gtk-box-pack-start vb hb false false 0)

                (set w (gtk-spin-button-new-with-range 0 1 0.01))
                (gtk-spin-button-set-value w 0.3)
                (gtk-spin-button-set-numeric w true)
                (gtk-box-pack-start hb w false false 4)
                (set <info "w-scd-spin1"> w)

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/arrow-left-3.png")
                        (netptr supervision-scd-left1)
                        undef undef )

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/arrow-right-3.png")
                        (netptr supervision-scd-right1)
                        undef undef )

                (gtk-box-pack-start hb (gtk-label-new "") false false 16)

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/palm-pilot-sync.png")
                        (netptr supervision-sync)
                        undef undef )

                (set w (gtk-spin-button-new-with-range 0 1 0.01))
                (gtk-spin-button-set-value w 0.3)
                (gtk-spin-button-set-numeric w true)
                (gtk-box-pack-start hb w false false 4)
                (set <info "w-scd-spin2"> w)

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/arrow-left-3.png")
                        (netptr supervision-scd-left2)
                        undef undef )

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/arrow-right-3.png")
                        (netptr supervision-scd-right2)
                        undef undef )

                (gtk-box-pack-start hb (gtk-label-new "") true false 0)

                (gui-setup-button info undef hb
                        (pix-load-static "icons/16x16/archive-insert-2.png")
                        (netptr supervision-force)
                        undef undef )

        (set w (gtk-scrolled-window-new undef undef))
        (gtk-box-pack-start @w w true true 0)
        (gtk-scrolled-window-set-policy w
                (cmacro GTK_POLICY_AUTOMATIC)
                (cmacro GTK_POLICY_AUTOMATIC) )
        (set <info "w-adj2"> w)

        (set text (gtk-text-view-new))
        (gtk-container-add w text)
        (gtk-text-view-set-editable text false)
        (gtk-text-view-set-cursor-visible text false)
        (gtk-text-view-set-wrap-mode text (cmacro GTK_WRAP_NONE))
        (set <info "w-text2"> text) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-delete (e info)
        (<> <info "th"> undef) )

(defnet gui-exit (info)
        (close <info "w-win">) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-update (info)
        (deflocal menu-info btn-info av1 av2 name1 name2 running both-selected
                  supervision map-exists i)

        (set menu-info <info "w-menu-bar">)
        (set btn-info <info "w-toolbar">)
        (set av1 <info "av1">)
        (set av2 <info "av2">)
        (set running (<> <info "th"> undef))
        (set both-selected (and (not running) (<> av1 undef) (<> av2 undef)))
        (set supervision <info "supervision">)
        (if supervision
        then    (gtk-widget-show <info "w-supervision-toolbar">)
        else    (gtk-widget-hide <info "w-supervision-toolbar">) )
        (set map-exists false)
        (if (not running)
        then    (set name1 (fullpath->name <info "path1">))
                (set name2 (fullpath->name <info "path2">))
                (set map-exists (cfg-exists (key-map av1 av2 name1 name2)))
                (gtk-widget-set-sensitive <menu-info "swap-order"> both-selected)
                (gtk-widget-set-sensitive <menu-info "clear-scd1">
                        (if (= av1 undef) false (cfg-exists (key-scd av1 name1))) )
                (gtk-widget-set-sensitive <menu-info "clear-scd2">
                        (if (= av2 undef) false (cfg-exists (key-scd av2 name2))) )
                (set i (if (or (= av1 undef) (= av2 undef))
                                false
                                (cfg-exists (key-sck av1 av2 name1 name2)) ))
                (gtk-widget-set-sensitive <menu-info "clear-sck"> i)
                (gtk-widget-set-sensitive <menu-info "clear-failed-sck"> i)
                (gtk-widget-set-sensitive <menu-info "report-failed"> i)
                (gtk-widget-set-sensitive <menu-info "clear-map">
                        (if (or (= av1 undef) (= av2 undef)) false map-exists) )
                (set i (> (length <info "w-text1">) 0))
                (gtk-widget-set-sensitive <menu-info "save-text1"> i)
                (gtk-widget-set-sensitive <menu-info "clear-text1"> i)
                (set i (> (length <info "w-text2">) 0))
                (gtk-widget-set-sensitive <menu-info "save-text2"> i)
                (gtk-widget-set-sensitive <menu-info "clear-text2"> i)
                (gtk-widget-set-sensitive <menu-info "save-frame1"> supervision)
                (gtk-widget-set-sensitive <menu-info "save-frame2"> supervision)
                (gtk-widget-set-sensitive <menu-info "print-selected">
                        (or (<> av1 undef) (<> av2 undef)) ))
        (gtk-widget-set-sensitive <info "w-menu"> (not running))
        (gtk-widget-set-sensitive <info "w-supervision-toolbar"> (not running))
        (gtk-widget-set-sensitive <btn-info "open1"> (not running))
        (gtk-widget-set-sensitive <btn-info "open2"> (not running))
        (gtk-widget-set-sensitive <btn-info "start"> both-selected)
        (gtk-widget-set-sensitive <btn-info "abort">
                (and running (not <info "abort">)) )
        (gtk-widget-set-sensitive <btn-info "supervision"> both-selected)
        (gtk-widget-set-sensitive <btn-info "audio"> map-exists)
        (gtk-widget-set-sensitive <btn-info "prefs"> (not running)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-report (info)
        (deflocal text1 ab cb av1 av2 name1 name2 k sck map p q n i)

        (set text1 <info "w-text1">)
        (set ab <info "a-combo-goto">)
        (set cb <info "w-combo-goto">)
        (while (> (length ab) 0) do
                (array-remove ab 0)
                (gtk-combo-box-text-remove cb 0) )
        (alt    (seq    (set av1 <info "av1">)
                        (<> av1 undef)
                        (set av2 <info "av2">)
                        (<> av2 undef)
                        (set name1 (fullpath->name <info "path1">))
                        (set name2 (fullpath->name <info "path2">))
                        (set k (cfg-get (key-map av1 av2 name1 name2)))
                        (<> k undef)
                        (set sck (cfg-get (key-sck av1 av2 name1 name2)))
                        (<> sck undef)
                        (set map (map-create <k 0> <k 1>))
                        (for i in <k 2> do
                                (set p <i 0>)
                                (set q <i 1>)
                                (set n <i 2>)
                                (map-bind-basic (car map) p q n)
                                (map-bind-basic (cdr map) q p n) )
                        (map-report-basic (cons text1 ab)
                                map name1 name2
                                (/ <sck 3> <sck 2>)
                                (/ <sck 5> <sck 4>)
                                (length <sck 0>) <sck 1> ))
                (gtk-text-buffer-set-text text1 "") )
        (if (= (length ab) 0)
        then    (array-append ab [ 1 1 0 ]) )
        (for i in ab do
                (set n <i 2>)
                (gtk-combo-box-text-append-text cb
                        (+ <[ "(" "[" "-" "[" ] n>
                           (int->str <i 0> 6 '0')
                           <[ ")" "-" "]" "]" ] n> ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-open-file1 (info)
        (gui-open-file info 1) )

(defnet gui-open-file2 (info)
        (gui-open-file info 2) )

(defnet gui-open-file (info which)
        (deflocal win vb hb fc path btn i)

        (set win (gtk-window-new))
        (gtk-window-set-transient-for win <info "w-win">)
        (gtk-window-set-modal win true)
        (gtk-window-set-title win (+ $"Select movie " which))
        (gtk-container-set-border-width win 8)

        (set vb (gtk-vbox-new false 10))
        (gtk-container-add win vb)

        (set fc (gtk-file-chooser-widget-new (cmacro GTK_FILE_CHOOSER_ACTION_OPEN)))
        (gtk-box-pack-start vb fc true true 0)
        (gtk-file-chooser-set-show-hidden fc true)

        (set path (cfg-get "path"))
        (repeat until (= path undef)
                (alt    (seq    (pathexists path)
                                (if (isdir path)
                                then    (gtk-file-chooser-set-current-folder fc path)
                                else    (gtk-file-chooser-select-filename fc path) )
                                (clr path) )
                        (seq    (rtrim path '/')
                                (search "/" path i (maxint))
                                (set path (sub 0 (+ i 1) path)) )
                        (clr path) ))

        (set hb (gtk-hbox-new false 6))
        (gtk-box-pack-start vb hb false false 0)

        (gtk-box-pack-end hb (gtk-iconed-button
                (pix-load-static "icons/16x16/dialog-cancel-3.png")
                $"Cancel"
                (netptr gtk-close-win)
                win ) false false 0 )

        (set i (list fc win which info))

        (gtk-signal-connect fc "file-activated" (netptr gui-open-file-ok) i)

        (set btn (gtk-iconed-button
                (pix-load-static "icons/16x16/dialog-apply.png")
                "Ok"
                (netptr gui-open-file-ok)
                i ))
        (gtk-box-pack-end hb btn false false 0)

        (opt    (gui-open-file-combo fc btn i)
                (gtk-box-pack-start hb i false false 0) )

        (gtk-window-set-default-size win (fc-width) (fc-height))
        (gtk-widget-show-all win) )

(defnet gui-open-file-combo (fc btn @w)
        (deflocal a i)

        (set a (array 0))
        (sqlite3-exec-data _db (netptr gui-open-file-combo-cback) a
                "SELECT path,name FROM paths ORDER BY name" )
        (> (length a) 0)

        (set @w (gtk-combo-box-text-new))
        (gtk-signal-connect @w "changed" (netptr gui-open-file-combo-selection) @w a fc btn)

        (for i in 1 .. (length a) do
                (gtk-combo-box-text-append-text @w (str-ellipsize-middle <a (for-pos) 0> 50)) ))

(defnet gui-open-file-combo-cback (a path name)
        (if (pathexists path)
        then    (array-append a (cons name path)) ))

(defnet gui-open-file-combo-selection (cb a fc btn)
        (gtk-file-chooser-select-filename fc (cdr <a (gtk-combo-box-get-active cb)>))
        ;(gtk-button-clicked btn)
        )

(defnet gui-open-file-ok (info)
        (deflocal path name win which av n)

        (set path (gtk-file-chooser-get-filename <info 0>))
        (pathexists path)
        (not (isdir path))
        (set win <info 1>)
        (set which <info 2>)
        (set info <info 3>)
        (set av (av-avformat-open-input path))
        (alt    (seq    (<> av undef)
                        (set n (av-r-frame-rate av (av-video-stream-idx av)))
                        (rationalp n)
                        (> n 0)
                        (set n (av-approximated-number-of-frames av))
                        (integerp n)
                        (>= n 3) )
                (seq    (close av)
                        (gtk-message-error win (+ path $": movie not supported"))
                        (fail) ))
        (close win)
        (set name (fullpath->name path))
        (gtk-text-buffer-append <info "w-text2">
                (+ $"selected movie " which ": `" name "'" nl) )
        (gtk-adjustment-set-value <info "w-adj2"> (maxint))
        (close <info (+ "av" which)>)
        (set <info (+ "path" which)> path)
        (set <info (+ "av" which)> av)
        (gtk-spin-button-set-range <info (+ "w-spin" which)> 1 (- n 2))
        (supervision-clear info)
        (if <info "supervision">
        then    (supervision-pix info) )
        (cfg-set "path" path)
        (opt (sqlite3-exec _db undef
                "INSERT INTO paths VALUES('"
                (sqlite3-escape-strings path) "','"
                (sqlite3-escape-strings name) "')" ))
        (gui-report info)
        (gui-update info) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-save-text (info which)
        (deflocal win vb hb fc path i)

        (set win (gtk-window-new))
        (gtk-window-set-transient-for win <info "w-win">)
        (gtk-window-set-modal win true)
        (gtk-window-set-title win (+ "Save" ' ' <[ "top" "bottom" ] (- which 1)> " text as..."))
        (gtk-container-set-border-width win 8)

        (set vb (gtk-vbox-new false 10))
        (gtk-container-add win vb)

        (set fc (gtk-file-chooser-widget-new (cmacro GTK_FILE_CHOOSER_ACTION_SAVE)))
        (gtk-box-pack-start vb fc true true 0)
        (gtk-file-chooser-set-show-hidden fc true)

        (set path (cfg-get "save-path"))
        (repeat until (= path undef)
                (alt    (seq    (pathexists path)
                                (if (isdir path)
                                then    (gtk-file-chooser-set-current-folder fc path)
                                else    (gtk-file-chooser-select-filename fc path) )
                                (clr path) )
                        (seq    (rtrim path '/')
                                (search "/" path i (maxint))
                                (set path (sub 0 (+ i 1) path)) )
                        (clr path) ))

        (set hb (gtk-hbox-new false 6))
        (gtk-box-pack-start vb hb false false 0)

        (gtk-box-pack-end hb (gtk-iconed-button
                (pix-load-static "icons/16x16/dialog-cancel-3.png")
                $"Cancel"
                (netptr gtk-close-win)
                win ) false false 0 )

        (set i (list fc win which info))

        (gtk-signal-connect fc "file-activated" (netptr gui-save-text-ok) i)

        (gtk-box-pack-end hb (gtk-iconed-button
                (pix-load-static "icons/16x16/dialog-apply.png")
                "Ok"
                (netptr gui-save-text-ok)
                i ) false false 0 )

        (gtk-window-set-default-size win (fc-width) (fc-height))
        (gtk-widget-show-all win) )

(defnet gui-save-text-ok (info)
        (deflocal path win which f s)

        (set path (gtk-file-chooser-get-filename <info 0>))
        (stringp path)
        (not (isdir path))
        (set win <info 1>)
        (set which <info 2>)
        (set info <info 3>)
        (if (pathexists path)
        then    (gtk-question win (+ $"File `" path $"' exists." nl
                                     $"Do you want to overwrite it?" )))
        (set f (fcreate path))
        (if (= f undef)
        then    (gtk-message-error win (+ $"Creation of file `" path $"' failed."))
                (fail) )
        (close win)
        (cfg-set "save-path" path)
        (set s (gtk-text-buffer-get-text <info (+ "w-text" which)>))
        (if (<> (utf8-length s) (length s))
        then    (set s (+ (utf8-bom) s)) )
        (fprint f
                (if (cms-windows)
                        (find-and-replace s "\n" "\r\n")
                        s )
                (if (cms-windows)
                        "\r\n"
                        nl ))
        (close f) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-swap-order (info)
        (deflocal av1 av2 path1 path2 n1 n2)

        (set av1 <info "av1">)
        (<> av1 undef)
        (set av2 <info "av2">)
        (<> av2 undef)
        (set path1 <info "path1">)
        (set path2 <info "path2">)
        (set <info "av1"> av2)
        (set <info "av2"> av1)
        (set <info "path1"> path2)
        (set <info "path2"> path1)
        (set path1 <info "w-spin1">)
        (set path2 <info "w-spin2">)
        (set n1 (gtk-spin-button-get-value path1))
        (set n2 (gtk-spin-button-get-value path2))
        (gtk-spin-button-set-range path1 1 (- (av-approximated-number-of-frames av2) 2))
        (gtk-spin-button-set-range path2 1 (- (av-approximated-number-of-frames av1) 2))
        (gtk-spin-button-set-value path1 n2)
        (gtk-spin-button-set-value path2 n1)
        (if <info "supervision">
        then    (supervision-clear info)
                (supervision-pix info) )
        (gui-report info)
        (gui-print-selected info) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-scd1 (info)
        (deflocal av key)

        (set av <info "av1">)
        (<> av undef)
        (set key (key-scd av (fullpath->name <info "path1">)))
        (truep (cfg-exists key))
        (gtk-question <info "w-win">
                (+ $"The \"scd\" data for movie 1 will be deleted." nl $"Are you sure?") )
        (cfg-clr key)
        (gui-update info) )

(defnet gui-clear-scd2 (info)
        (deflocal av key)

        (set av <info "av2">)
        (<> av undef)
        (set key (key-scd av (fullpath->name <info "path2">)))
        (truep (cfg-exists key))
        (gtk-question <info "w-win">
                (+ $"The \"scd\" data for movie 2 will be deleted." nl $"Are you sure?") )
        (cfg-clr key)
        (gui-update info) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-sck (info)
        (deflocal av1 av2 key)

        (set av1 <info "av1">)
        (<> av1 undef)
        (set av2 <info "av2">)
        (<> av2 undef)
        (set key (key-sck av1 av2
                (fullpath->name <info "path1">)
                (fullpath->name <info "path2">) ))
        (truep (cfg-exists key))
        (gtk-question <info "w-win">
                (+ $"The \"sift check\" data will be deleted." nl $"Are you sure?") )
        (cfg-clr key)
        (gui-update info) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-failed-sck (info)
        (deflocal win av1 av2 key sck cache i)

        (set av1 <info "av1">)
        (<> av1 undef)
        (set av2 <info "av2">)
        (<> av2 undef)
        (set key (key-sck av1 av2
                (fullpath->name <info "path1">)
                (fullpath->name <info "path2">) ))
        (set sck (cfg-get key))
        (<> sck undef)
        (set win <info "w-win">)
        (set cache <sck 0>)
        (set i (- (length cache) <sck 1>))
        (if (= i 0)
        then    (gtk-message-info win $"There are no failed checks.")
                (fail) )
        (gtk-question win (+ (if (= i 1) $"1 failed check will be deleted."
                (+ "" i $" failed checks will be deleted." )) nl $"Are you sure?" ))
        (for i in cache do
                (if (booleanp (cdr i))
                then    (if (not (cdr i))
                        then    (assoc-clr cache (car i)) )))
        (cfg-set key sck)
        (gui-report info) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-map (info)
        (deflocal av1 av2 key)

        (set av1 <info "av1">)
        (<> av1 undef)
        (set av2 <info "av2">)
        (<> av2 undef)
        (set key (key-map av1 av2
                (fullpath->name <info "path1">)
                (fullpath->name <info "path2">) ))
        (truep (cfg-exists key))
        (gtk-question <info "w-win">
                (+ $"The \"mapping\" data will be deleted." nl $"Are you sure?") )
        (cfg-clr key)
        (gui-report info)
        (gui-update info) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-paths (info)
        (deflocal win q l)

        (set win <info "w-win">)
        (set q (queue))
        (sqlite3-exec-data _db (netptr gui-clear-paths-cback) q
                "SELECT path FROM paths" )
        (set l (length q))
        (if (= l 0)
        then    (gtk-message-info win $"There are no obsolete paths.")
                (fail) )
;(print (sprintl q nl) nl)
        (gtk-question win (+ "" l " " (if (= l 1) $"obsolete path will be deleted." $"obsolete paths will be deleted.") nl
                             $"Are you sure?" ))
        (sqlite3-exec _db undef
                "DELETE FROM paths WHERE path IN('"
                (sprintl q "','") "')" )
        (gui-update info) )

(defnet gui-clear-paths-cback (q path)
        (if (not (pathexists path))
        then    (queue-put q (sqlite3-escape-strings path)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-data-and-vacuum (info)
        (deflocal win a q l)

        (set win <info "w-win">)
        (set a (assoc))
        (set q (queue))
        (set <a undef> true) ; può sembrare strano ma serve
        (sqlite3-exec-data _db (netptr gui-clear-data-and-vacuum-cback1) a
                "SELECT path,name FROM paths" )
        (sqlite3-exec-data _db (netptr gui-clear-data-and-vacuum-cback2) (cons a q)
                "SELECT key FROM config" )
        (set l (length q))
        (if (= l 0)
        then    (gtk-message-info win $"There are no obsolete data.")
                (fail) )
;(gui-clear-data-and-vacuum-tmp q)
        (gtk-question win (+ (if (= l 1) $"1 obsolete data will be deleted."
                                (+ "" l $" obsolete data will be deleted.") ) nl
                             $"Are you sure?" ))
        (sqlite3-exec _db undef
                "DELETE FROM config WHERE key IN('"
                (sprintl q "','") "')" )
        (sqlite3-exec _db undef "VACUUM") )

;(defnet gui-clear-data-and-vacuum-tmp (q)
;        (deflocal i)
;
;        (for i in q do
;                (opt    (lmatch i "scd-")
;                        (print <(cfg-get i) 3> nl) )))

(defnet gui-clear-data-and-vacuum-cback1 (a path name)
        (deflocal av)

        (if (pathexists path)
        then    (set av (av-avformat-open-input path))
                (if (<> av undef)
                then    (set <a (key-basic av name)> true)
                        (close av) )))

(defnet gui-clear-data-and-vacuum-cback2 (a key)
        (deflocal q l code1 code2)

        (set q (cdr a))
        (set a (car a))
        (if (in (length key) [ 44 84 ])
        then    (set code1 (sub  4 40 key))
                (set code2 (sub 44 40 key)) )
        (case (sub 0 4 key) of
                "scd-"  (if (not (in code1 a))
                        then    (queue-put q key) )
                "sck-"  (if (or (not (in code1 a)) (not (in code2 a)))
                        then    (queue-put q key) )
                "map-"  (if (or (not (in code1 a)) (not (in code2 a)))
                        then    (queue-put q key) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-clear-text1 (info)
        (gtk-text-buffer-set-text <info "w-text1"> "")
        (gui-update info) )

(defnet gui-clear-text2 (info)
        (gtk-text-buffer-set-text <info "w-text2"> "")
        (gui-update info) )

(defnet gui-print-selected (info)
        (deflocal path)

        (set path <info "path1">)
        (if (<> path undef)
        then    (gtk-text-buffer-append <info "w-text2">
                        (+ $"selected movie " "1: `" (fullpath->name path) "'" nl) ))
        (set path <info "path2">)
        (if (<> path undef)
        then    (gtk-text-buffer-append <info "w-text2">
                        (+ $"selected movie " "2: `" (fullpath->name path) "'" nl) ))
        (gtk-adjustment-set-value <info "w-adj2"> (maxint))
        (gui-update info) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-report-failed (info)
        (deflocal win av1 av2 key sck a i)

        (set av1 <info "av1">)
        (<> av1 undef)
        (set av2 <info "av2">)
        (<> av2 undef)
        (set key (key-sck av1 av2
                (fullpath->name <info "path1">)
                (fullpath->name <info "path2">) ))
        (set sck (cfg-get key))
        (<> sck undef)
        (set win <info "w-win">)
        (set a <sck 0>)
        (set i (- (length a) <sck 1>))
        (if (= i 0)
        then    (gtk-message-info win $"There are no failed checks.")
                (fail) )
        (gtk-text-buffer-set-text <info "w-text2"> "")
        (gui-start info (netptr gui-start-failed-thread)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-restore-default (info)
        (deflocal win i)

        (set win <info "w-win">)
        (gtk-question win (+ $"Default parameters will be restored." nl $"Are you sure?"))
        (sqlite3-begin _db)
        (alt    (seq    (for i in (default-parameters) do
                                (cfg-set (car i) (cdr i)) )
                        (sqlite3-end _db)
                        (supervision-clear info)
                        (opt (supervision-pix-with-check info)) )
                (seq    (sqlite3-rollback _db)
                        (gtk-message-error win "errore nel salvataggio configurazione") )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-start-main (info)
        (gui-start info (netptr gui-start-main-thread)) )

(defnet gui-start (info net)
        (deflocal th)

        (= <info "th"> undef)
        (supervision-clear info)
        (set th (thread-create net
                        (thread-self)
                        (fullpath->name <info "path1">)
                        (fullpath->name <info "path2">)
                        <info "av1">
                        <info "av2">
                        <info "pix">
                        <info "default"> ))
        (<> th undef)
        (set <info "th"> th)
        (set <info "start-time"> (now))
        (set <info "abort"> false)
        (gui-update info)
        (gtk-timeout-add (netptr gui-server) 0.05 info th
                <info "w-text1">
                <info "w-text2">
                <info "w-adj2"> ))

(defnet gui-start-main-thread (th-main name1 name2 av1 av2 pix default-info)
        (deflocal abort scd1 scd2)

        (set abort true)
        (opt    (scdscan th-main name1 av1 pix default-info scd1)
                (scdscan th-main name2 av2 pix default-info scd2)
                (match th-main name1 name2 av1 av2 scd1 scd2 pix default-info)
                (set abort false) )
        (send (cons "q" abort) to th-main) )

(defnet gui-start-failed-thread (th-main name1 name2 av1 av2 pix default-info)
        (deflocal abort scd1 scd2 m cache score i)

        (set abort true)
        (opt    (scdscan th-main name1 av1 pix default-info scd1)
                (scdscan th-main name2 av2 pix default-info scd2)
                (pix-wip pix)
                (scdscan-draw-image th-main)
                (set m (match-create name1 name2 av1 av2 scd1 scd2 th-main pix default-info))
                (map-report m)
                (set cache (match-cache m))
                (for i in cache do
                        (if (booleanp (cdr i))
                        then    (if (not (cdr i))
                                then    (msg-log m nl)
                                        (assoc-clr cache (car i))
                                        (opt (sift-check true m (str->num (sub 0 6 (car i))) (str->num (sub 6 6 (car i))) score)) ))
                        until (match-abort m) )
                (match-destroy m false)
                (set abort false) )
        (send (cons "q" abort) to th-main) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-abort (info)
        (deflocal th)

        (not <info "abort">)
        (set th <info "th">)
        (<> th undef)
        (gtk-question <info "w-win">
                (+ $"The current operation will be aborted." nl $"Are you sure?") )
        (set <info "abort"> true)
        (sendbuf 100 false to th)
        (gui-update info) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet gui-server (info th w-text1 w-text2 w-adj2)
        (deflocal finished req msg pix)

        (set finished false)
        (opt*   (receivenb msg from th)
                (set req (car msg))
                (set msg (cdr msg))
                (case req of
                        "d"     (seq    (gtk-image-set-from-pixbuf
                                                <info "w-image">
                                                <info "pix"> )
                                        (send true to th) )
                        "c1"    (gtk-text-buffer-set-text w-text1 msg)
                        "c1c"   (gtk-text-buffer-set-text-color w-text1 (car msg) (cdr msg))
                        "c2"    (gtk-text-buffer-set-text w-text2 msg)
                        "c2c"   (gtk-text-buffer-set-text-color w-text2 (car msg) (cdr msg))
                        "p1"    (gtk-text-buffer-append w-text1 msg)
                        "p1c"   (gtk-text-buffer-append-color w-text1 (car msg) (cdr msg))
                        "p2"    (seq    (gtk-text-buffer-append w-text2 msg)
                                        (gtk-adjustment-set-value w-adj2 (maxint)) )
                        "p2c"   (seq    (gtk-text-buffer-append-color w-text2 (car msg) (cdr msg))
                                        (gtk-adjustment-set-value w-adj2 (maxint)) )
                        "q"     (seq    (thread-join th)
                                        (assoc-clr info "th")
                                        (set <info "abort"> msg)
                                        (gtk-text-buffer-append w-text1 (+ "\nelapsed time: "
                                                (date-s2hhmmss (- (now) <info "start-time">)) ))
                                        (gui-report info)
                                        (gui-update info)
                                        (if msg
                                        then    (gtk-text-buffer-append w-text2 "Aborted\n")
                                                (gtk-adjustment-set-value w-adj2 (maxint)) )
                                        (if <info "supervision">
                                        then    (supervision-pix info)
                                        else    (set pix <info "pix">)
                                                (pix-logo pix)
                                                (gtk-image-set-from-pixbuf
                                                        <info "w-image"> pix ))
                                        (set finished true) )))
        (not finished) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

