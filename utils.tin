;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun url-home-page () "http://fsinapsi.altervista.org")

(defun compile-time () (date (date-year (cdate)) (date-month (cdate)) (date-day (cdate))))

(defun date->version (date)
        (+ (int->str (date-day date) 2 '0') "-"
           (int->str (date-month date) 2 '0') "-"
           (int->str (date-year date) 4 '0') ))

(defun remote-version-key () "ffmatch-win64-20")

(defun remote-version () net remote-version)
(defnet remote-version (@s)
        (deflocal i)

        (set @s (download-as-string (+ (url-home-page) "/code/ffmatch/index.html")))
        (stringp @s)
        (search (remote-version-key) @s i)
        (set @s (str->date (sub (+ i (- (length (remote-version-key)) 2)) 8 @s)))
        (datep @s) )

(defun remote-version-cached () net remote-version-cached)
(defnet remote-version-cached (@s)
        (deflocal now s)

        (set now (now))
        (set @s (cfg-get "last-check-for-updates-version"))
        (set s (- now (cfg-get "last-check-for-updates")))
        (if (or (= @s undef) (= s undef) (> s (* 60 60 12)))
        then    (set @s (remote-version))
                (if (= @s undef)
                then    (set @s (compile-time)) )
                (cfg-set "last-check-for-updates-version" @s)
                (cfg-set "last-check-for-updates" now) ))

(defun gc-version () (gc-version0 (gc-version-major) (gc-version-minor)))
(defun gc-version0 (maj min)
        (if (or (= maj undef) (= min undef))
                "< 7.1"
                (sprint maj '.' min) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun key-scd (av name)
        (+ "scd-" (key-basic av name)) )

(defun key-sck (av1 av2 name1 name2)
        (+ "sck-" (key-basic av1 name1) (key-basic av2 name2)) )

(defun key-map (av1 av2 name1 name2)
        (+ "map-" (key-basic av1 name1) (key-basic av2 name2)) )

(defun key-basic (av name)
        (gcry-sha1sum-fast (+ (if (rmatch (av-codec-name av (av-video-stream-idx av)) "_cuvid") "cuvid" "")
                              (int->str (width av) 5 '0')
                              (int->str (height av) 5 '0')
                              (int->str (av-approximated-number-of-frames av) 6 '0')
                              name )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun dump-ar-circa (ar val valp)
        (if (and (<> ar val)
                 (< (/ (abs (- ar val)) val) 0.012) )
                (+ " (~" valp ")")
                "" ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun array-avg (a) net array-avg)
(defnet array-avg (a @m)
        (deflocal l i)

        (set l (length a))
        (set @m 0)
        (for i in 1 .. (length a) do
                (set @m (approximate (+ @m <a (for-pos)>))) )
        (if (> l 0)
        then    (set @m (/ @m l)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun seq-threshold (v min max thr) net seq-threshold)
(defnet seq-threshold (v min max thr @a)
        (deflocal i n k)

        (set n 1)
        (for i in (+ min 1) .. max do
                (if (>= <v i> thr)
                then    (inc n) ))
        (set @a (array n))
        (set n 0)
        (set k min)
        (for i in (+ min 1) .. max do
                (if (>= <v i> thr)
                then    (set <@a n> (cons (- i k) k))
                        (set k i)
                        (inc n) ))
        (set <@a n> (cons (- max k -1) k)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet pix-clear (pix)
        (pix-draw-box pix 0 0 (maxint) (maxint) (pix-color 0 0 0 0)) )

(defnet pix-clear-and-copy-pix (pix icon)
        (pix-clear pix)
        (pix-draw-pix pix
                (/ (- (width pix) (width icon)) 2)
                (/ (- (height pix) (height icon)) 2)
                icon ))

(defnet pix-logo (pix)
        (pix-clear-and-copy-pix pix
                (pix-load-static "128x128/emblem-videos.png") ))

(defnet pix-wip (pix)
        (pix-clear-and-copy-pix pix
                (pix-load-static "80x80/work-in-progress.png") ))

(defnet pix-error (pix)
        (pix-clear-and-copy-pix pix
                (pix-load-static "48x48/dialog-error-4.png") ))

(defnet pix-copy-frames (pix frm1 frm2 pix1 pix2 gamma1 gamma2)
        (deflocal sy)

        (pix-clear pix)
        (pix-scale frm1 pix1)
        (pix-scale frm2 pix2)
        (pix-gamma pix1 gamma1)
        (pix-gamma pix2 gamma2)
        (set sy (/ (- (height pix) (height pix1) (height pix2) (space)) 2))
        (pix-draw-pix pix (/ (- (width pix) (width pix1)) 2) sy pix1)
        (pix-draw-pix pix (/ (- (width pix) (width pix2)) 2) (+ sy (height pix1) (space)) pix2) )

(defnet pix-create-pixfrm (pix av1 av2 @pix1 @pix2)
        (deflocal default-info w1 h1 w2 h2 ww1 hh1 ww2 hh2 k si co)

        (set default-info <_kv "default">)
        (set w1 (width av1))
        (set h1 (height av1))
        (set w2 (width av2))
        (set h2 (height av2))
        (set k (av-sample-aspect-ratio av1 (av-video-stream-idx av1)))
        (if (> k 0)
        then    (if (> k 1)
                then    (set w1 (* w1 k))
                else    (set h1 (/ h1 k)) ))
        (set k (av-sample-aspect-ratio av2 (av-video-stream-idx av2)))
        (if (> k 0)
        then    (if (> k 1)
                then    (set w2 (* w2 k))
                else    (set h2 (/ h2 k)) ))
        (if (cfg-get-or-default "match-scale" default-info)
        then    (set k (sqrt (/ (* w1 h1) (* w2 h2))))
                (set w2 (* w2 k))
                (set h2 (* h2 k)) )
        (set k (cfg-get-or-default-num "filter-rotate1" default-info))
        (if (= k 0)
        then    (set ww1 w1)
                (set hh1 h1)
        else    (if (< k 0)
                then    (inc k 360) )
                (if (or (= k 90) (= k 270))
                then    (set ww1 h1)
                        (set hh1 w1)
                else    (if (= k 180)
                        then    (set ww1 w1)
                                (set hh1 h1)
                        else    (set k (* (/ k 180) (* (atan 1) 4)))
                                (set si (abs (sin k)))
                                (set co (abs (cos k)))
                                (set ww1 (+ (* w1 co) (* h1 si)))
                                (set hh1 (+ (* h1 co) (* w1 si))) )))
        (set k (cfg-get-or-default-num "filter-rotate2" default-info))
        (if (= k 0)
        then    (set ww2 w2)
                (set hh2 h2)
        else    (if (< k 0)
                then    (inc k 360) )
                (if (or (= k 90) (= k 270))
                then    (set ww2 h2)
                        (set hh2 w2)
                else    (if (= k 180)
                        then    (set ww2 w2)
                                (set hh2 h2)
                        else    (set k (* (/ k 180) (* (atan 1) 4)))
                                (set si (abs (sin k)))
                                (set co (abs (cos k)))
                                (set ww2 (+ (* w2 co) (* h2 si)))
                                (set hh2 (+ (* h2 co) (* w2 si))) )))
        (set k (min (/ (- (width pix) (* 2 (space))) (max ww1 ww2))
                    (/ (- (height pix) (* 3 (space))) (+ hh1 hh2)) ))
        (set @pix1 (pix-create (max 1 (* k w1)) (max 1 (* k h1))))
        (set @pix2 (pix-create (max 1 (* k w2)) (max 1 (* k h2)))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet msg-log (m msg)
        (sendbuf 100 (cons "p2" msg) to (match-th-main m)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet da-chiudere (obj)
        (queue-put <_kv "da-chiudere"> obj) )

(defnet quit ()
        (deflocal obj)

        (for obj in <_kv "da-chiudere"> do
                (close obj) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

