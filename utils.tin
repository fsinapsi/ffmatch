;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun url-home-page () "http://fsinapsi.altervista.org")

(defun compile-time () (date (date-year (cdate)) (date-month (cdate)) (date-day (cdate))))

(defun date->version (date)
        (+ (int->str (date-day date) 2 '0') "-"
           (int->str (date-month date) 2 '0') "-"
           (int->str (date-year date) 4 '0') ))

(defun remote-version-key () "ffmatch-win64-20")

(defun remote-version () net remote-version)
(defnet remote-version (@s)
        (deflocal i)

        (set @s (download-as-string (+ (url-home-page) "/code/ffmatch/index.html")))
        (stringp @s)
        (search (remote-version-key) @s i)
        (set @s (str->date (sub (+ i (- (length (remote-version-key)) 2)) 8 @s)))
        (datep @s) )

(defun remote-version-cached () net remote-version-cached)
(defnet remote-version-cached (@s)
        (deflocal now s)

        (set now (now))
        (set @s (cfg-get "last-check-for-updates-version"))
        (set s (- now (cfg-get "last-check-for-updates")))
        (if (or (= @s undef) (= s undef) (> s (* 60 30)))
        then    (set @s (remote-version))
                (if (= @s undef)
                then    (set @s (compile-time)) )
                (cfg-set "last-check-for-updates-version" @s)
                (cfg-set "last-check-for-updates" now) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun key-scd (av name)
        (+ "scd-" (key-basic av name)) )

(defun key-sck (av1 av2 name1 name2)
        (+ "sck-" (key-basic av1 name1) (key-basic av2 name2)) )

(defun key-map (av1 av2 name1 name2)
        (+ "map-" (key-basic av1 name1) (key-basic av2 name2)) )

(defun key-prm (av1 av2 name1 name2)
        (+ "prm-" (key-basic av1 name1) (key-basic av2 name2)) )

(defun key-basic (av name)
        (gcry-sha1sum-fast (+ (if (rmatch (av-codec-name av (av-video-stream-idx av)) "_cuvid") "cuvid" "")
                              (int->str (width av) 5 '0')
                              (int->str (height av) 5 '0')
                              (int->str (av-approximated-number-of-frames av) 6 '0')
                              name )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun dump-ar-circa (ar val valp)
        (if (and (<> ar val)
                 (< (/ (abs (- ar val)) val) 0.012) )
                (+ " (~" valp ")")
                "" ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun array-avg (a) net array-avg)
(defnet array-avg (a @m)
        (deflocal l i)

        (set l (length a))
        (set @m 0)
        (for i in 1 .. (length a) do
                (set @m (approximate (+ @m <a (for-pos)>))) )
        (if (> l 0)
        then    (set @m (/ @m l)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun seq-threshold (v min max thr) net seq-threshold)
(defnet seq-threshold (v min max thr @a)
        (deflocal i n k)

        (set n 1)
        (for i in (+ min 1) .. max do
                (if (>= <v i> thr)
                then    (inc n) ))
        (set @a (array n))
        (set n 0)
        (set k min)
        (for i in (+ min 1) .. max do
                (if (>= <v i> thr)
                then    (set <@a n> (cons (- i k) k))
                        (set k i)
                        (inc n) ))
        (set <@a n> (cons (- max k -1) k)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun my-av-par (which av) net my-av-par)
(defnet my-av-par (which av @par)
        (deflocal default-info)

        (set default-info <_kv "default">)
        (if (cfg-get-or-default (+ "filter-ar" which "-auto") default-info)
        then    (set @par (av-sample-aspect-ratio av (av-video-stream-idx av)))
                (if (= @par 0)
                then    (set @par 1) )
        else    (set @par (/ (cfg-get-or-default-num (+ "filter-ar" which) default-info)
                             (/ (width av) (height av)) ))))

(defun my-av-dar (which av)
        (* (/ (width av) (height av)) (my-av-par which av)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet pix-clear (pix)
        (pix-draw-box pix 0 0 (maxint) (maxint) (pix-color 0 0 0 0)) )

(defnet pix-clear-and-copy-pix (pix icon)
        (pix-clear pix)
        (pix-draw-pix pix
                (/ (- (width pix) (width icon)) 2)
                (/ (- (height pix) (height icon)) 2)
                icon ))

(defnet pix-logo (pix)
        (pix-clear-and-copy-pix pix
                ;(pix-load-static "128x128/emblem-videos.png")
                (pix-load-static "logo.png")
                ))

(defnet pix-wip (pix)
        (pix-clear-and-copy-pix pix
                (pix-load-static "80x80/work-in-progress.png") ))

(defnet pix-error (pix)
        (pix-clear-and-copy-pix pix
                (pix-load-static "48x48/dialog-error-4.png") ))

(defnet pix-copy-frames (pix frm1 frm2 pix1 pix2 gamma1 gamma2)
        (deflocal sy)

        (pix-clear pix)
        (pix-sws-scale-bicubic frm1 pix1)
        (pix-sws-scale-bicubic frm2 pix2)
        (pix-gamma pix1 gamma1)
        (pix-gamma pix2 gamma2)
        (set sy (/ (- (height pix) (height pix1) (height pix2) (space)) 2))
        (pix-draw-pix pix (/ (- (width pix) (width pix1)) 2) sy pix1)
        (pix-draw-pix pix (/ (- (width pix) (width pix2)) 2) (+ sy (height pix1) (space)) pix2) )

(defnet pix-create-pixfrm (pix av1 av2 @pix1 @pix2)
        (deflocal default-info w1 h1 w2 h2 ww1 hh1 ww2 hh2 k si co)

        (set default-info <_kv "default">)
        (set w1 (width av1))
        (set h1 (height av1))
        (set w2 (width av2))
        (set h2 (height av2))
        (set k (my-av-par 1 av1))
        (if (> k 1)
        then    (set w1 (* w1 k))
        else    (set h1 (/ h1 k)) )
        (set k (my-av-par 2 av2))
        (if (> k 1)
        then    (set w2 (* w2 k))
        else    (set h2 (/ h2 k)) )
        (case (cfg-get-or-default-num "scaling-mode" default-info) of
                0   (seq    (set k (/ w2 h2))
                            (set h2 (sqrt (/ (* w1 h1) k)))
                            (set w2 (* h2 k)) )
                1   (seq    (set h2 (* h2 (/ w1 w2)))
                            (set w2 w1) ))
        (set k (cfg-get-or-default-num "filter-rotate1" default-info))
        (if (= k 0)
        then    (set ww1 w1)
                (set hh1 h1)
        else    (if (< k 0)
                then    (inc k 360) )
                (if (or (= k 90) (= k 270))
                then    (set ww1 h1)
                        (set hh1 w1)
                else    (if (= k 180)
                        then    (set ww1 w1)
                                (set hh1 h1)
                        else    (set k (* (/ k 180) (* (atan 1) 4)))
                                (set si (abs (sin k)))
                                (set co (abs (cos k)))
                                (set ww1 (+ (* w1 co) (* h1 si)))
                                (set hh1 (+ (* h1 co) (* w1 si))) )))
        (set k (cfg-get-or-default-num "filter-rotate2" default-info))
        (if (= k 0)
        then    (set ww2 w2)
                (set hh2 h2)
        else    (if (< k 0)
                then    (inc k 360) )
                (if (or (= k 90) (= k 270))
                then    (set ww2 h2)
                        (set hh2 w2)
                else    (if (= k 180)
                        then    (set ww2 w2)
                                (set hh2 h2)
                        else    (set k (* (/ k 180) (* (atan 1) 4)))
                                (set si (abs (sin k)))
                                (set co (abs (cos k)))
                                (set ww2 (+ (* w2 co) (* h2 si)))
                                (set hh2 (+ (* h2 co) (* w2 si))) )))
        (set k (min (/ (- (width pix) (* 2 (space))) (max ww1 ww2))
                    (/ (- (height pix) (* 3 (space))) (+ hh1 hh2)) ))
        (set @pix1 (pix-create (max 1 (* k w1)) (max 1 (* k h1))))
        (set @pix2 (pix-create (max 1 (* k w2)) (max 1 (* k h2)))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet msg-log (m msg)
        (sendbuf 100 (cons "p2" msg) to (match-th-main m)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet debug-print (msg)
        (deflocal f)

        (if <_kv "debug-enabled">
        then    (set f <_kv "debug-fp">)
                (if (= f undef)
                then    (set f (fopenrw <_kv "debug-path">))
                        (if (<> f undef)
                        then    (fsetpos (length f) f)
                        else    (set f (fcreate <_kv "debug-path">)) )
                        (if (<> f undef)
                        then    (set <_kv "debug-fp"> f)
                                (da-chiudere f) ))
                (if (<> f undef)
                then    (fprint f (sprint (now) " - " (thread-self) ": " msg nl))
                        (fflush f) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet da-chiudere (obj)
        (queue-put <_kv "da-chiudere"> obj) )

(defnet quit ()
        (deflocal thclk th1 th2 thsnd obj)

        (set thclk <_kv "th-clock">)
        (th-clock-send undef)
        (set th1 <_kv "th-read-frame1">)
        (send undef to th1)
        (set th2 <_kv "th-read-frame2">)
        (send undef to th2)
        (set thsnd <_kv "th-sound">)
        (send undef to thsnd)
        (thread-join thclk)
        (thread-join th1)
        (thread-join th2)
        (thread-join thsnd)
        (for obj in <_kv "da-chiudere"> do
                (close obj) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet a ()
        (deflocal p i j c r g b)

        (set p (pix-load-static "logo.png"))
        (for i in 0 .. (- (width p) 1) do
        (for j in 0 .. (- (height p) 1) do
                (set c (pix-point p i j))
                (set r (pix-color-red c))
                (set g (pix-color-green c))
                (set b (pix-color-blue c))
                (= r g)
                (= r b)
                (pix-draw-point p i j (pix-color r r r (- 255 r))) ))
        (pix-save-png p "pippo.png") )

(defnet b ()
        (deflocal p q z i j c r g b)

        (set p (pix-load-static "logo.png"))
        (set q (pix-load-static "128x128/emblem-videos.png"))

        (pix-draw-pix-alpha p (/ (- (width p) (width q)) 2) (/ (- (height p) (height q)) 2) q)

        (set z (pix-load "icons/logo.png"))

        (for i in 0 .. (- (width z) 1) do
        (for j in 0 .. (- (height z) 1) do
                (set c (pix-point z i j))
                (set r (pix-color-red c))
                (set g (pix-color-green c))
                (set b (pix-color-blue c))
                (pix-draw-point z i j (pix-color r g 0xff (pix-color-alpha c))) ))

        (pix-draw-pix-alpha p 0 0 z)

        (pix-save-png p "pippo.png") )

(defnet c ()
        (deflocal p q z i j c r g b)

        (set p (pix-load "icons/sfondo2.png"))
        (set q (pix-load "icons/logo-alt4.png"))
        (for i in 0 .. (- (width p) 1) do
        (for j in 0 .. (- (height p) 1) do
                (set c (pix-point p i j))
                (pix-draw-point p i j (pix-color
                        (pix-color-red c)
                        (pix-color-green c)
                        (pix-color-blue c)
                        (pix-color-alpha (pix-point q i j)) ))))

        (set z (pix-clone p))

        (close q)

        (set q (pix-load-static "128x128/emblem-videos.png"))

        (pix-draw-pix-alpha p (/ (- (width p) (width q)) 2) (/ (- (height p) (height q)) 2) q)

        (pix-draw-pix-alpha p 0 0 z)

        (pix-save-png p "pippo.png") )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

