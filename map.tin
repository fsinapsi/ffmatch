;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun map-create (n1 n2) net map-create)
(defnet map-create (n1 n2 @map)
        (deflocal a1 a2)

        (integerp n1)
        (>= n1 1)
        (integerp n2)
        (>= n2 1)
        (set a1 (array 3))
        (set <a1 0> 1)
        (set <a1 1> n1)
        (set a2 (array 3))
        (set <a2 0> 1)
        (set <a2 1> n2)
        (set @map (cons (array default a1 1)
                        (array default a2 1) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun map-max1 (m)
        (map-max-low (car (match-map m))) )

(defun map-max2 (m)
        (map-max-low (cdr (match-map m))) )

(defun map-max-low (map)
        <map -1 1> )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun map-free1 (m)
        (map-free-low (map-undef1 m)) )

(defun map-free2 (m)
        (map-free-low (map-undef2 m)) )

(defun map-free-low (u) net map-free-low)
(defnet map-free-low (u @n)
        (deflocal ut)

        (set @n 0)
        (while (> (length u) 0) do
                (set ut (queue-get u))
                (inc @n (- <ut 1> <ut 0> -1)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet map-bind (m p q n)
        (array-append (match-map-step m) (list p q n))
        (set m (match-map m))
        (map-bind-low (car m) p q n)
        (map-bind-low (cdr m) q p n) )

(defnet map-bind-low (map p q n)
        (deflocal i j a aa freea freeb found)

        (for i in 0 .. (- (length map) 1) do
                (set a <map i>)
                (set freea <a 0>)
                (set freeb <a 1>)
                (set found (in p freea .. freeb))
                until found )
        (truep found)
        (= <a 2> undef)
        (set j (+ p n -1))
        (in j freea .. freeb)
        (if (> p freea)
        then    (set aa (array 3))
                (set <aa 0> freea)
                (set <aa 1> (- p 1))
                (array-insert map i aa)
                (inc i) )
        (if (< j freeb)
        then    (set aa (array 3))
                (set <aa 0> (+ j 1))
                (set <aa 1> freeb)
                (array-insert map (+ i 1) aa) )
        (set <a 0> p)
        (set <a 1> j)
        (set <a 2> q)
        (if (and (> i 0)
                 (= p freea)
                 (= (- <map (- i 1) 2> <map (- i 1) 0>)
                    (- q p) ))
        then    (array-remove map i)
                (inc i -1)
                (set a <map i>)
                (set <a 1> j)
                (set p <a 0>)
                (set q <a 2>) )
        (if (and (= j freeb)
                 (= (- <map (+ i 1) 2> <map (+ i 1) 0>)
                    (- q p) ))
        then    (set <a 1> <map (+ i 1) 1>)
                (array-remove map (+ i 1)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun map-undef1 (m)
        (map-undef-low (car (match-map m)) (cdr (match-map m))) )

(defun map-undef2 (m)
        (map-undef-low (cdr (match-map m)) (car (match-map m))) )

(defun map-undef-low (map1 map2) net map-undef-low)
(defnet map-undef-low (map1 map2 @q)
        (deflocal i a min max)

        (set @q (queue))
        (set min 1)
        (for i in 1 .. (length map1) do
                (set a <map1 (for-pos)>)
                (if (= <a 2> undef)
                then    (set max (if (= i (length map1))
                                <map2 -1 1>
                                (- <map1 i 2> 1) ))
                        (if (<= min max)
                        then    (queue-put @q (list <a 0> <a 1> min max)) )
                else    (set min (+ <a 2> <a 1> -<a 0> 1)) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun map-point1 (m p)
        (map-point-low (car (match-map m)) p) )

(defun map-point2 (m p)
        (map-point-low (cdr (match-map m)) p) )

(defun map-point-low (map p) net map-point-low)
(defnet map-point-low (map p @q)
        (deflocal i a found)

        (set found false)
        (for i in 1 .. (length map) do
                (set a <map (for-pos)>)
                (if (in p <a 0> .. <a 1>)
                then    (set @q (+ <a 2> p -<a 0>))
                        (set found true) )
                until found )
        (= found true) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet map-report (m)
        (map-report-low (match-th-main m) (match-map m)
                (match-name1 m) (match-name2 m)
                (match-rx m) (match-ry m)
                (length (match-cache m)) (match-passed m) true ))

(defnet map-report-low (target map name1 name2 rx ry nchecks npassed go-home)
        (deflocal ab map-max1 map-max2 wrn1 wrn2 u ut a p1 p2 q prv i)

        (if (listp target)
        then    (set ab (cdr target))
                (set target (car target)) )
        (set map-max1 (map-max-low (car map)))
        (set map-max2 (map-max-low (cdr map)))
        (map-report-print (cons "c1" (+
                "(1) " name1 nl
                "(2) " name2 nl
                nl
                "free (1): " (map-free-low (map-undef-low (car map) (cdr map))) "/" map-max1 nl
                "free (2): " (map-free-low (map-undef-low (cdr map) (car map))) "/" map-max2 nl
                nl
                $"checks: " nchecks $" (passed: " npassed ")" nl
                (if (= rx undef) "" (+
                $"horizontal ratio: " (approx3 rx) nl ))
                (if (= ry undef) "" (+
                $"vertical ratio: " (approx3 ry) nl ))
                nl )) target )
        (set wrn1 (queue))
        (set wrn2 (queue))
        (set u (map-undef-low (car map) (cdr map)))
        (set ut (queue-get u))
        (set map (car map))
        (for i in 1 .. (length map) do
                (set a <map (for-pos)>)
                (set p1 <a 0>)
                (set p2 <a 1>)
                (set q <a 2>)
                (if (= q undef)
                then    (if (and (= p1 <ut 0>) (= p2 <ut 1>))
                        then    (map-report-print-range p1 p2 (red) (blue) target)
                                (map-report-print (cons "p1c" (cons (red) (+ " -/-> ???" " {" (- p2 p1 -1) "-" (- <ut 3> <ut 2> -1) "}" nl))) target)
                                (if (arrayp ab)
                                then    (array-append ab (list p1 <ut 2> 0) (list p2 <ut 3> 0)) )
                                (set ut (queue-get u))
                        else    (queue-put wrn1 (list p1 p2 (if (= prv undef) 0 prv))) )
                        (clr prv)
                else    (if (integerp prv)
                        then    (queue-put wrn2 (list (+ prv 1) (- q 1) (- p1 1))) )
                        (set prv (+ q p2 -p1))
                        (map-report-print-range p1 p2 (darkgreen) (blue) target)
                        (map-report-print (cons "p1c" (cons (darkgreen) (+ " ---> ["
                            (int->str q 6 '0') "-" (int->str prv 6 '0') "] {"
                            (int->str (- p2 p1 -1) 6 '0') "} (diff=" (- q p1) ")" nl))) target )
                        (if (arrayp ab)
                        then    (if (= p1 p2)
                                then    (array-append ab (list p1 q 3))
                                else    (array-append ab (list p1 q 1) (list p2 prv 2)) ))
                        (if (and (= i 1) (= p1 1) (> q 1))
                        then    (queue-put wrn2 (list 1 (- q 1) 0)) )
                        (if (and (= i (length map)) (= p2 map-max1) (< (+ q p2 -p1) map-max2))
                        then    (queue-put wrn2 (list (+ q p2 -p1 1) map-max2 map-max1)) )))
        (if (> (length wrn1) 0)
        then    (map-report-print (cons "p1" $"\n1st movie frame(s) not found in the 2nd one:\n") target)
                (map-report-diff wrn1 target 0) )
        (if (> (length wrn2) 0)
        then    (map-report-print (cons "p1" $"\n2nd movie frame(s) not found in the 1st one:\n") target)
                (map-report-diff wrn2 target 1) )
        (if go-home
        then    (map-report-print [ "h1" . "" ] target) ))

(defnet map-report-diff (wrn target which)
        (deflocal i)

        (while (> (length wrn) 0) do
                (set i (queue-get wrn))
                (map-report-print-range <i 0> <i 1> (black) (blue) target)
                (map-report-print (cons "p1" (+ <[ "¹" "²" ] which> "---> [" (int->str <i 2> 6 '0') "] {"
                        (- <i 1> <i 0> -1) "}" nl )) target )))

(defnet map-report-print-range (p1 p2 color1 color2 target)
        (map-report-print (cons "p1c" (cons color1 "[")) target)
        (map-report-print (cons "p1c" (cons color2 (int->str p1 6 '0'))) target)
        (map-report-print (cons "p1c" (cons color1 "-")) target)
        (map-report-print (cons "p1c" (cons color2 (int->str p2 6 '0'))) target)
        (map-report-print (cons "p1c" (cons color1 "]")) target) )

(defnet map-report-print (msg target)
        (deflocal req)

        (if (threadp target)
        then    (sendbuf 100 msg to target)
        else    (set req (car msg))
                (set msg (cdr msg))
                (case req of
                        "c1"    (iup-text-set-and-go-home target msg)
                        "p1"    (iup-text-append-and-go-end target msg)
                        "p1c"   (iup-text-append-and-go-end-color target (car msg) (cdr msg))
                        "h1"    (iup-text-append-and-go-home target msg) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

