;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet cfg-set (key val)
        (cfg-set-low _db key val) )

(defnet cfg-set-low (db key val)
        (set key (sqlite3-escape-strings key))
        (if (= val undef)
        then    (sqlite3-exec db undef
                        "DELETE FROM config WHERE key='" key "'" )
        else    (if (stringp val)
                then    (set val (sqlite3-escape-strings val)) )
                (alt    (sqlite3-exec db undef
                                "INSERT INTO config VALUES('" key "','" val "')" )
                        (sqlite3-exec db undef
                                "UPDATE config SET value='" val
                                "' WHERE key='" key "'" ))))

(defnet cfg-clr (key)
        (cfg-set key undef) )

(defnet cfg-inc (key val)
        (deflocal v)

        (set v (cfg-get-num key))
        (cfg-set key (+ (if (= v undef) 0 v) val)) )

(defun cfg-exists (key)
        (= <(sqlite3-exec _db
                "SELECT count(*) FROM config WHERE key='"
                (sqlite3-escape-strings key) "'" ) 0 0>
           "1" ))

(defun cfg-get (key)
        <(sqlite3-exec _db
                "SELECT value FROM config WHERE key='"
                (sqlite3-escape-strings key) "'" ) 0 0> )

(defun cfg-get-or-default (key default-info) net cfg-get-or-default)
(defnet cfg-get-or-default (key default-info @val)
        (set @val (cfg-get key))
        (if (= @val undef)
        then    (set @val <default-info key>) ))

(defun cfg-get-num (key)
        (cfg-validate-num (cfg-get key)) )

(defun cfg-get-or-default-num (key default-info)
        (cfg-validate-num (cfg-get-or-default key default-info)) )

(defun cfg-validate-num (val)
        (if (complexp val) val (str->num val)) )

(defun cfg-get-lang () net cfg-get-lang)
(defnet cfg-get-lang (@lang)
        (set @lang (cfg-get "lang"))
        (set @lang (if (= @lang undef) (lang) (cfg-validate-num @lang))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet cfg-cb (self)
        (deflocal cfg-info default-info q butbox vbox dlg)

        (set cfg-info (assoc))
        (set <_kv "cfg-info"> cfg-info)
        (set default-info <_kv "default">)

        (set q (queue))

        (set butbox (iup-box-ok-cancel (netptr cfg-ok) undef q))

        (set vbox (iup-vbox
                        (cfg-setup-tabs q)
                        butbox ))
        (iup-set-str-attribute vbox "MARGIN" "4x4")
        (iup-set-int vbox "GAP" 0)

        (set dlg (iup-dialog vbox))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" $"Preferences")
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-attribute-handle dlg "DEFAULTENTER" (iup-box-ok-cancel-btn-ok butbox))
        (iup-set-attribute-handle dlg "DEFAULTESC" (iup-box-ok-cancel-btn-cancel butbox))

        (iup-set-active <cfg-info "sb-sift-scale-pixels"> (cfg-get-or-default "sift-scale" default-info))
        (iup-set-callback <cfg-info "tb-sift-scale"> "ACTION" (netptr cfg-toggled-sift-scale))
        (cfg-combo-sift-impl-cb <cfg-info "cb-sift-impl">)
        (iup-set-callback <cfg-info "cb-sift-impl"> "ACTION" (netptr cfg-combo-sift-impl-cb))
        (iup-set-active <cfg-info "sb-filter-ar1"> (not (cfg-get-or-default "filter-ar1-auto" default-info)))
        (iup-set-active <cfg-info "sb-filter-ar2"> (not (cfg-get-or-default "filter-ar2-auto" default-info)))
        (iup-set-callback <cfg-info "tb-filter-ar1-auto"> "ACTION" (netptr cfg-toggled-fileter-ar1))
        (iup-set-callback <cfg-info "tb-filter-ar2-auto"> "ACTION" (netptr cfg-toggled-fileter-ar2))

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (close dlg)
        (iup-close-queue q)
        (assoc-clr _kv "cfg-info")
        (gui-update)
        (gui-update-image) )

(defnet cfg-ok (self)
        (sqlite3-begin _db)
        (alt    (seq    (cfg-ok-low self)
                        (sqlite3-end _db) )
                (seq    (sqlite3-rollback _db)
                        (iup-error60 self "errore nel salvataggio configurazione") ))
        (iup-exit-loop) )

(defnet cfg-ok-low (self)
        (deflocal cfg-info c old-lang new-lang)

        (set cfg-info <_kv "cfg-info">)

        (for c in [ "sift-scale"
                    "sift-draw-lines"
                    "final-closure"
                    "scd-display-enabled"
                    "filter-mirror1"
                    "filter-mirror2"
                    "filter-flip1"
                    "filter-flip2"
                    "filter-ar1-auto"
                    "filter-ar2-auto"
                    "cuvid-enabled"
                    ;"concurrency-enabled"
                    ] do
                (cfg-set c (iup-get-bool <cfg-info (+ "tb-" c)> "VALUE")) )

        (for c in [ "scd-min-blocks"
                    "scd-min-avg-block-size"
                    "supervision-skip-double"
                    "checks-per-interval"
                    "checks-per-interval-extra"
                    "sift-agreements-min"
                    "sift-scale-pixels"
                    "min-keypoints"
                    "vlfeat-first-octave-idx"
                    "vlfeat-nlevels-per-octave"
                    ] do
                (cfg-set c (iup-get-int <cfg-info (+ "sb-" c)> "SPINVALUE")) )

        (for c in [ "init-scd-threshold"
                    "min-scd-threshold"
                    "scd-threshold-ratio"
                    "min-keypoints-min-ratio"
                    "min-keypoints-min-ratio-lum"
                    "sift-match-threshold"
                    "sift-match-threshold-min-ratio"
                    "sift-proportionality-threshold"
                    "filter-gamma1"
                    "filter-gamma2"
                    "filter-rotate1"
                    "filter-rotate2"
                    "filter-ar1"
                    "filter-ar2"
                    "vlfeat-peak-threshold"
                    "vlfeat-edge-threshold"
                    ] do
                (cfg-set c (iup-text-spin-ratio-val <cfg-info (+ "sb-" c)>)) )

        (cfg-set "sift-impl" (- (iup-get-int <cfg-info "cb-sift-impl"> "VALUE") 1))

        (set old-lang (lang))
        (set new-lang (- (iup-get-int <cfg-info "cb-languages"> "VALUE") 1))
        (cfg-set "lang" new-lang)
        (if (<> new-lang old-lang)
        then    (set-lang new-lang)
                (iup-warning60 self $"Changing the language requires a restart to take effect.") ))

(defun cfg-setup-tabs (q) net cfg-setup-tabs)
(defnet cfg-setup-tabs (q @wid)
        (set @wid (iup-tabs
                (cfg-setup-tabs-page1 q)
                (cfg-setup-tabs-page2 q)
                (cfg-setup-tabs-page3 q)
                (cfg-setup-tabs-page4 q)
                (cfg-setup-tabs-page5 q) ))
        (iup-set-str-attribute @wid "TABTITLE0" $"Sequences")
        (iup-set-str-attribute @wid "TABTITLE1" $"Checks")
        (iup-set-str-attribute @wid "TABTITLE2" "SIFT")
        (iup-set-str-attribute @wid "TABTITLE3" $"Filters")
        (iup-set-str-attribute @wid "TABTITLE4" "Misc")
        (iup-set-bool @wid "EXPAND" true) )

(defun cfg-setup-tabs-page1 (q) net cfg-setup-tabs-page1)
(defnet cfg-setup-tabs-page1 (q @wid)
        (deflocal cfg-info default-info hbox1 hbox2 hbox3)

        (set cfg-info <_kv "cfg-info">)
        (set default-info <_kv "default">)

        (set hbox1 (iup-hbox
                (cfg-setup-framed-spin-ratio "Init thres./avg" 4 20
                        (cfg-get-or-default-num "init-scd-threshold" default-info) 0.1
                        cfg-info "sb-init-scd-threshold" )
                (cfg-setup-framed-spin-ratio "Min thres./avg" 2 8
                        (cfg-get-or-default-num "min-scd-threshold" default-info) 0.1
                        cfg-info "sb-min-scd-threshold" )
                (cfg-setup-framed-spin-ratio "Thres. ratio" 0.01 0.99
                        (cfg-get-or-default-num "scd-threshold-ratio" default-info) 0.01
                        cfg-info "sb-scd-threshold-ratio" )))

        (set hbox2 (iup-hbox
                (cfg-setup-framed-spin "Min int. blks" 1 50
                        (cfg-get-or-default-num "scd-min-blocks" default-info)
                        cfg-info "sb-scd-min-blocks" )
                (cfg-setup-framed-spin "Min avg blk size" 1 200
                        (cfg-get-or-default-num "scd-min-avg-block-size" default-info)
                        cfg-info "sb-scd-min-avg-block-size" ) ))

        (set hbox3 (iup-hbox
                (cfg-setup-framed-toggle $"Final closure" $"enabled" (cfg-get-or-default "final-closure" default-info) cfg-info "tb-final-closure") ))

        (iup-set-int hbox1 "GAP" 5)
        (iup-set-int hbox2 "GAP" 5)
        (iup-set-int hbox3 "GAP" 5)

        (set @wid (iup-vbox hbox1 hbox2 hbox3))
        (iup-set-int @wid "GAP" 2) )

(defun cfg-setup-tabs-page2 (q) net cfg-setup-tabs-page2)
(defnet cfg-setup-tabs-page2 (q @wid)
        (deflocal cfg-info default-info hbox1 hbox2 hbox3)

        (set cfg-info <_kv "cfg-info">)
        (set default-info <_kv "default">)

        (set hbox1 (iup-hbox
                (iup-frame-with-margin "Checks per interval+extra" (iup-hbox
                        (cfg-setup-spin 2 100 (cfg-get-or-default-num "checks-per-interval" default-info)
                            cfg-info "sb-checks-per-interval" )
                        (cfg-setup-spin 2 100 (cfg-get-or-default-num "checks-per-interval-extra" default-info)
                            cfg-info "sb-checks-per-interval-extra" )))
                (iup-frame-with-margin "Min keypoints+min ratios" (iup-hbox
                        (cfg-setup-spin 2 1000 (cfg-get-or-default-num "min-keypoints" default-info)
                            cfg-info "sb-min-keypoints" )
                        (cfg-setup-spin-ratio 0.01 0.99 (cfg-get-or-default-num "min-keypoints-min-ratio" default-info) 0.01
                            cfg-info "sb-min-keypoints-min-ratio" )
                        (cfg-setup-spin-ratio 0.01 0.99 (cfg-get-or-default-num "min-keypoints-min-ratio-lum" default-info) 0.01
                            cfg-info "sb-min-keypoints-min-ratio-lum" )))))

        (set hbox2 (iup-hbox
                (cfg-setup-framed-spin "Min agreements" 1000 100000
                        (cfg-get-or-default-num "sift-agreements-min" default-info)
                        cfg-info "sb-sift-agreements-min" )
                (cfg-setup-framed-spin-ratio "Proport. thres." 0 0.99
                        (cfg-get-or-default-num "sift-proportionality-threshold" default-info) 0.01
                        cfg-info "sb-sift-proportionality-threshold" )))

        (set hbox3 (iup-hbox
                (iup-frame-with-margin $"Scaling" (iup-hbox
                        (cfg-setup-toggle $"enabled" (cfg-get-or-default "sift-scale" default-info) cfg-info "tb-sift-scale")
                        (cfg-setup-spin 10000 1000000 (cfg-get-or-default-num "sift-scale-pixels" default-info)
                            cfg-info "sb-sift-scale-pixels" )))))

        (iup-set-int hbox1 "GAP" 5)
        (iup-set-int hbox2 "GAP" 5)
        (iup-set-int hbox3 "GAP" 5)

        (set @wid (iup-vbox hbox1 hbox2 hbox3))
        (iup-set-int @wid "GAP" 2) )

(defun cfg-setup-tabs-page3 (q) net cfg-setup-tabs-page3)
(defnet cfg-setup-tabs-page3 (q @wid)
        (deflocal cfg-info default-info list hbox1 hbox2 hbox3 i)

        (set cfg-info <_kv "cfg-info">)
        (set default-info <_kv "default">)

        (set list (iup-list))
        (set <cfg-info "cb-sift-impl"> list)
        (iup-set-bool list "DROPDOWN" true)
        (for i in (sift-impl) do
                (iup-set-str-attribute list (+ (for-pos) 1) i) )
        (iup-set-int list "VALUE" (+ (cfg-get-or-default-num "sift-impl" default-info) 1))

        (set hbox1 (iup-hbox
                (iup-frame-with-margin "SIFT impl." list)
                (iup-frame-with-margin "Match thres.+min ratio" (iup-hbox
                        (cfg-setup-spin-ratio 0.05 0.95 (cfg-get-or-default-num "sift-match-threshold" default-info) 0.01
                            cfg-info "sb-sift-match-threshold" )
                        (cfg-setup-spin-ratio 0.01 0.99 (cfg-get-or-default-num "sift-match-threshold-min-ratio" default-info) 0.01
                            cfg-info "sb-sift-match-threshold-min-ratio" )))))

        (set hbox2 (iup-hbox
                (cfg-setup-framed-spin "First octave idx" -1 5
                        (cfg-get-or-default-num "vlfeat-first-octave-idx" default-info)
                        cfg-info "sb-vlfeat-first-octave-idx" )
                (cfg-setup-framed-spin "NLevels per octave" 1 6
                        (cfg-get-or-default-num "vlfeat-nlevels-per-octave" default-info)
                        cfg-info "sb-vlfeat-nlevels-per-octave" )))

        (set hbox3 (iup-hbox
                (cfg-setup-framed-spin-ratio "Peak threshold" 0 5
                        (cfg-get-or-default-num "vlfeat-peak-threshold" default-info) 0.05
                        cfg-info "sb-vlfeat-peak-threshold" )
                (cfg-setup-framed-spin-ratio "Edge threshold" 1 10
                        (cfg-get-or-default-num "vlfeat-edge-threshold" default-info) 0.05
                        cfg-info "sb-vlfeat-edge-threshold" )))

        (iup-set-int hbox1 "GAP" 5)
        (iup-set-int hbox2 "GAP" 5)
        (iup-set-int hbox3 "GAP" 5)

        (set @wid (iup-vbox hbox1 hbox2 hbox3))
        (iup-set-int @wid "GAP" 2) )

(defun cfg-setup-tabs-page4 (q) net cfg-setup-tabs-page4)
(defnet cfg-setup-tabs-page4 (q @wid)
        (deflocal cfg-info default-info hbox1 hbox2 hb1 hb2)

        (set cfg-info <_kv "cfg-info">)
        (set default-info <_kv "default">)

        (set hb1 (iup-hbox
            (cfg-setup-toggle "auto" (cfg-get-or-default "filter-ar1-auto" default-info) cfg-info "tb-filter-ar1-auto")
            (cfg-setup-spin-ratio 0.1 10 (cfg-get-or-default-num "filter-ar1" default-info) 0.01
            cfg-info "sb-filter-ar1" )))
        (iup-set-str-attribute hb1 "ALIGNMENT" "ACENTER")

        (set hb2 (iup-hbox
            (cfg-setup-toggle "auto" (cfg-get-or-default "filter-ar2-auto" default-info) cfg-info "tb-filter-ar2-auto")
            (cfg-setup-spin-ratio 0.1 10 (cfg-get-or-default-num "filter-ar2" default-info) 0.01
            cfg-info "sb-filter-ar2" )))
        (iup-set-str-attribute hb2 "ALIGNMENT" "ACENTER")

        (set hbox1 (iup-hbox
                (cfg-setup-framed-spin-ratio "Gamma 1" 0.01 4
                        (cfg-get-or-default-num "filter-gamma1" default-info) 0.01
                        cfg-info "sb-filter-gamma1" )
                (cfg-setup-framed-toggle "Mirror 1" $"enabled"
                    (cfg-get-or-default "filter-mirror1" default-info) cfg-info "tb-filter-mirror1" )
                (cfg-setup-framed-toggle "Flip 1" $"enabled"
                    (cfg-get-or-default "filter-flip1" default-info) cfg-info "tb-filter-flip1" )
                (cfg-setup-framed-spin-ratio "Rotate 1" (- 0.01 360) (- 360 0.01)
                        (cfg-get-or-default-num "filter-rotate1" default-info) 0.01
                        cfg-info "sb-filter-rotate1" )
                (iup-frame-with-margin "Aspect ratio 1" hb1) ))
        (set hbox2 (iup-hbox
                (cfg-setup-framed-spin-ratio "Gamma 2" 0.01 4
                        (cfg-get-or-default-num "filter-gamma2" default-info) 0.01
                        cfg-info "sb-filter-gamma2" )
                (cfg-setup-framed-toggle "Mirror 2" $"enabled"
                    (cfg-get-or-default "filter-mirror2" default-info) cfg-info "tb-filter-mirror2" )
                (cfg-setup-framed-toggle "Flip 2" $"enabled"
                    (cfg-get-or-default "filter-flip2" default-info) cfg-info "tb-filter-flip2" )
                (cfg-setup-framed-spin-ratio "Rotate 2" (- 0.01 360) (- 360 0.01)
                        (cfg-get-or-default-num "filter-rotate2" default-info) 0.01
                        cfg-info "sb-filter-rotate2" )
                (iup-frame-with-margin "Aspect ratio 2" hb2) ))

        (iup-set-int hbox1 "GAP" 5)
        (iup-set-int hbox2 "GAP" 5)

        (set @wid (iup-vbox hbox1 hbox2))
        (iup-set-int @wid "GAP" 2) )

(defun cfg-setup-tabs-page5 (q) net cfg-setup-tabs-page5)
(defnet cfg-setup-tabs-page5 (q @wid)
        (deflocal cfg-info default-info hbox1 hbox2 hbox3 list i)

        (set cfg-info <_kv "cfg-info">)
        (set default-info <_kv "default">)

        (set hbox1 (iup-hbox
                (cfg-setup-framed-toggle "SCD display" $"enabled"
                    (cfg-get-or-default "scd-display-enabled" default-info) cfg-info "tb-scd-display-enabled" )
                (cfg-setup-framed-toggle $"Line drawing" $"enabled" (cfg-get-or-default "sift-draw-lines" default-info) cfg-info "tb-sift-draw-lines")
                (cfg-setup-framed-spin "Sup. step incr." 2 1000
                        (cfg-get-or-default-num "supervision-skip-double" default-info)
                        cfg-info "sb-supervision-skip-double" )))

        (set hbox2 (iup-hbox
                (cfg-setup-framed-toggle "CUVID" $"enabled" (cfg-get-or-default "cuvid-enabled" default-info) cfg-info "tb-cuvid-enabled")
                ;(cfg-setup-framed-toggle $"Concurrency" $"enabled"
                ;    (cfg-get-or-default "concurrency-enabled" default-info) cfg-info "tb-concurrency-enabled" )
                ))

        (set list (iup-list))
        (set <cfg-info "cb-languages"> list)
        (iup-set-bool list "DROPDOWN" true)
        (for i in (languages) do
                (iup-set-str-attribute list (+ (for-pos) 1) i) )
        (iup-set-int list "VALUE" (+ (lang) 1))

        (set hbox3 (iup-hbox
                (iup-frame-with-margin $"Language" list) ))

        (iup-set-int hbox1 "GAP" 5)
        (iup-set-int hbox2 "GAP" 5)
        (iup-set-int hbox3 "GAP" 5)

        (set @wid (iup-vbox hbox1 hbox2 hbox3))
        (iup-set-int @wid "GAP" 2) )

(defun cfg-setup-toggle (name status cfg-info key) net cfg-setup-toggle)
(defnet cfg-setup-toggle (name status cfg-info key @wid)
        (set @wid (iup-toggle (if (iup-gtk3) (+ " " name) name)))
        (set <cfg-info key> @wid)
        (iup-set-str-attribute @wid "VALUE" (if status "ON" "OFF")) )

(defun cfg-setup-framed-toggle (title name status cfg-info key)
        (iup-frame-with-margin title (cfg-setup-toggle name status cfg-info key)) )

(defun cfg-setup-spin (vmin vmax vcur cfg-info key) net cfg-setup-spin)
(defnet cfg-setup-spin (vmin vmax vcur cfg-info key @wid)
        (set @wid (iup-text-spin vmin vmax vcur))
        (set <cfg-info key> @wid) )

(defun cfg-setup-framed-spin (title vmin vmax vcur cfg-info key)
        (iup-frame-with-margin title (cfg-setup-spin vmin vmax vcur cfg-info key)) )

(defun cfg-setup-spin-ratio (vmin vmax vcur vinc cfg-info key) net cfg-setup-spin-ratio)
(defnet cfg-setup-spin-ratio (vmin vmax vcur vinc cfg-info key @wid)
        (set @wid (iup-text-spin-ratio vmin vmax vcur vinc))
        (set <cfg-info key> @wid) )

(defun cfg-setup-framed-spin-ratio (title vmin vmax vcur vinc cfg-info key)
        (iup-frame-with-margin title (cfg-setup-spin-ratio vmin vmax vcur vinc cfg-info key)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet cfg-toggled-sift-scale (self)
        (iup-set-active <_kv "cfg-info" "sb-sift-scale-pixels"> (iup-get-bool self "VALUE")) )

(defnet cfg-toggled-fileter-ar1 (self)
        (iup-set-active <_kv "cfg-info" "sb-filter-ar1"> (not (iup-get-bool self "VALUE"))) )

(defnet cfg-toggled-fileter-ar2 (self)
        (iup-set-active <_kv "cfg-info" "sb-filter-ar2"> (not (iup-get-bool self "VALUE"))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet cfg-combo-sift-impl-cb (self)
        (deflocal cfg-info vlfeat i)

        (set cfg-info <_kv "cfg-info">)
        (set vlfeat (= <(sift-impl) (- (iup-get-int self "VALUE") 1)> "VLFeat"))
        (for i in [ "sb-vlfeat-first-octave-idx"
                    "sb-vlfeat-nlevels-per-octave"
                    "sb-vlfeat-peak-threshold"
                    "sb-vlfeat-edge-threshold" ] do
                (iup-set-active <cfg-info i> vlfeat) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

